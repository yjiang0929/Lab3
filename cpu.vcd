$date
	Tue Oct 30 11:31:39 2018
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testCPU $end
$var wire 1 ! endtest $end
$var wire 1 " dutpassed $end
$var reg 1 # begintest $end
$var reg 1 $ clk $end
$scope module dut $end
$var wire 1 $ clk $end
$var wire 1 % memAddrSel $end
$var wire 1 & zeroFlag $end
$var wire 32 ' resAluRes [31:0] $end
$var wire 3 ( resAluOp [2:0] $end
$var wire 1 ) regWrEn $end
$var wire 2 * pcSel [1:0] $end
$var wire 32 + pcAluRes [31:0] $end
$var wire 32 , pcAdd [31:0] $end
$var wire 32 - nextPc [31:0] $end
$var wire 1 . memWrEn $end
$var wire 32 / memOut [31:0] $end
$var wire 32 0 memAddr [31:0] $end
$var wire 26 1 jumpAddr [25:0] $end
$var wire 2 2 jSel [1:0] $end
$var wire 1 3 immSel $end
$var wire 32 4 immExt [31:0] $end
$var wire 16 5 imm [15:0] $end
$var wire 32 6 cmdOut [31:0] $end
$var wire 32 7 branchAluRes [31:0] $end
$var wire 2 8 DwSel [1:0] $end
$var wire 32 9 Dw [31:0] $end
$var wire 32 : DbOrImm [31:0] $end
$var wire 32 ; Db [31:0] $end
$var wire 32 < Da [31:0] $end
$var wire 5 = Aw [4:0] $end
$var wire 5 > Ab [4:0] $end
$var wire 5 ? Aa [4:0] $end
$var reg 32 @ pc [31:0] $end
$scope module DbMux $end
$var wire 32 A neville [31:0] $end
$var wire 32 B harry [31:0] $end
$var wire 1 3 dumbledore $end
$var wire 32 C chosenOne [31:0] $end
$upscope $end
$scope module DwMux $end
$var wire 32 D neville [31:0] $end
$var wire 32 E harry [31:0] $end
$var wire 2 F dumbledore [1:0] $end
$var wire 32 G draco [31:0] $end
$var wire 32 H chosenOne [31:0] $end
$upscope $end
$scope module addrMux $end
$var wire 1 % dumbledore $end
$var wire 32 I neville [31:0] $end
$var wire 32 J harry [31:0] $end
$var wire 32 K chosenOne [31:0] $end
$upscope $end
$scope module branchAlu $end
$var wire 1 L SLT_internal $end
$var wire 1 M carryout $end
$var wire 3 N command [2:0] $end
$var wire 1 O nb $end
$var wire 1 P nout $end
$var wire 1 Q nslt_enable $end
$var wire 32 R operandA [31:0] $end
$var wire 32 S operandB [31:0] $end
$var wire 1 T overflow $end
$var wire 1 U overflow_internal $end
$var wire 1 V slt_a_and $end
$var wire 1 W slt_ab_and $end
$var wire 1 X slt_b_and $end
$var wire 1 Y slt_final $end
$var wire 1 Z slt_nand $end
$var wire 1 [ zero $end
$var wire 1 \ zero_nor $end
$var wire 1 ] subtract $end
$var wire 1 ^ slt_enable $end
$var wire 1 _ set_flags $end
$var wire 32 ` result [31:0] $end
$var wire 1 a alu_code_internal2 $end
$var wire 1 b alu_code_internal1 $end
$var wire 1 c alu_code_internal0 $end
$scope begin genblock[1] $end
$scope module bitslice $end
$var wire 1 d A $end
$var wire 1 e B $end
$var wire 1 f and_out $end
$var wire 1 g c_out $end
$var wire 1 h carry_in $end
$var wire 1 i mux0_not $end
$var wire 1 j mux1_not $end
$var wire 1 k mux2_not $end
$var wire 3 l mux_in [2:0] $end
$var wire 1 m mux_in0 $end
$var wire 1 n mux_in1 $end
$var wire 1 o mux_in2 $end
$var wire 1 p mux_in3 $end
$var wire 1 q mux_in4 $end
$var wire 1 r mux_in5 $end
$var wire 1 s mux_in6 $end
$var wire 1 t mux_in7 $end
$var wire 1 u nand_out $end
$var wire 1 v nor_out $end
$var wire 1 w or_out $end
$var wire 1 x sub_xor_out $end
$var wire 1 ] subtract $end
$var wire 1 y xor_out $end
$var wire 1 z carry_out $end
$var wire 1 { adder_out $end
$scope module adder0 $end
$var wire 1 d A $end
$var wire 1 | AandB $end
$var wire 1 } AxorB $end
$var wire 1 ~ AxorBandC $end
$var wire 1 x B $end
$var wire 1 h carryin $end
$var wire 1 z carryout $end
$var wire 1 { sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[2] $end
$scope module bitslice $end
$var wire 1 !" A $end
$var wire 1 "" B $end
$var wire 1 #" and_out $end
$var wire 1 $" c_out $end
$var wire 1 z carry_in $end
$var wire 1 %" mux0_not $end
$var wire 1 &" mux1_not $end
$var wire 1 '" mux2_not $end
$var wire 3 (" mux_in [2:0] $end
$var wire 1 )" mux_in0 $end
$var wire 1 *" mux_in1 $end
$var wire 1 +" mux_in2 $end
$var wire 1 ," mux_in3 $end
$var wire 1 -" mux_in4 $end
$var wire 1 ." mux_in5 $end
$var wire 1 /" mux_in6 $end
$var wire 1 0" mux_in7 $end
$var wire 1 1" nand_out $end
$var wire 1 2" nor_out $end
$var wire 1 3" or_out $end
$var wire 1 4" sub_xor_out $end
$var wire 1 ] subtract $end
$var wire 1 5" xor_out $end
$var wire 1 6" carry_out $end
$var wire 1 7" adder_out $end
$scope module adder0 $end
$var wire 1 !" A $end
$var wire 1 8" AandB $end
$var wire 1 9" AxorB $end
$var wire 1 :" AxorBandC $end
$var wire 1 4" B $end
$var wire 1 z carryin $end
$var wire 1 6" carryout $end
$var wire 1 7" sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[3] $end
$scope module bitslice $end
$var wire 1 ;" A $end
$var wire 1 <" B $end
$var wire 1 =" and_out $end
$var wire 1 >" c_out $end
$var wire 1 6" carry_in $end
$var wire 1 ?" mux0_not $end
$var wire 1 @" mux1_not $end
$var wire 1 A" mux2_not $end
$var wire 3 B" mux_in [2:0] $end
$var wire 1 C" mux_in0 $end
$var wire 1 D" mux_in1 $end
$var wire 1 E" mux_in2 $end
$var wire 1 F" mux_in3 $end
$var wire 1 G" mux_in4 $end
$var wire 1 H" mux_in5 $end
$var wire 1 I" mux_in6 $end
$var wire 1 J" mux_in7 $end
$var wire 1 K" nand_out $end
$var wire 1 L" nor_out $end
$var wire 1 M" or_out $end
$var wire 1 N" sub_xor_out $end
$var wire 1 ] subtract $end
$var wire 1 O" xor_out $end
$var wire 1 P" carry_out $end
$var wire 1 Q" adder_out $end
$scope module adder0 $end
$var wire 1 ;" A $end
$var wire 1 R" AandB $end
$var wire 1 S" AxorB $end
$var wire 1 T" AxorBandC $end
$var wire 1 N" B $end
$var wire 1 6" carryin $end
$var wire 1 P" carryout $end
$var wire 1 Q" sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[4] $end
$scope module bitslice $end
$var wire 1 U" A $end
$var wire 1 V" B $end
$var wire 1 W" and_out $end
$var wire 1 X" c_out $end
$var wire 1 P" carry_in $end
$var wire 1 Y" mux0_not $end
$var wire 1 Z" mux1_not $end
$var wire 1 [" mux2_not $end
$var wire 3 \" mux_in [2:0] $end
$var wire 1 ]" mux_in0 $end
$var wire 1 ^" mux_in1 $end
$var wire 1 _" mux_in2 $end
$var wire 1 `" mux_in3 $end
$var wire 1 a" mux_in4 $end
$var wire 1 b" mux_in5 $end
$var wire 1 c" mux_in6 $end
$var wire 1 d" mux_in7 $end
$var wire 1 e" nand_out $end
$var wire 1 f" nor_out $end
$var wire 1 g" or_out $end
$var wire 1 h" sub_xor_out $end
$var wire 1 ] subtract $end
$var wire 1 i" xor_out $end
$var wire 1 j" carry_out $end
$var wire 1 k" adder_out $end
$scope module adder0 $end
$var wire 1 U" A $end
$var wire 1 l" AandB $end
$var wire 1 m" AxorB $end
$var wire 1 n" AxorBandC $end
$var wire 1 h" B $end
$var wire 1 P" carryin $end
$var wire 1 j" carryout $end
$var wire 1 k" sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[5] $end
$scope module bitslice $end
$var wire 1 o" A $end
$var wire 1 p" B $end
$var wire 1 q" and_out $end
$var wire 1 r" c_out $end
$var wire 1 j" carry_in $end
$var wire 1 s" mux0_not $end
$var wire 1 t" mux1_not $end
$var wire 1 u" mux2_not $end
$var wire 3 v" mux_in [2:0] $end
$var wire 1 w" mux_in0 $end
$var wire 1 x" mux_in1 $end
$var wire 1 y" mux_in2 $end
$var wire 1 z" mux_in3 $end
$var wire 1 {" mux_in4 $end
$var wire 1 |" mux_in5 $end
$var wire 1 }" mux_in6 $end
$var wire 1 ~" mux_in7 $end
$var wire 1 !# nand_out $end
$var wire 1 "# nor_out $end
$var wire 1 ## or_out $end
$var wire 1 $# sub_xor_out $end
$var wire 1 ] subtract $end
$var wire 1 %# xor_out $end
$var wire 1 &# carry_out $end
$var wire 1 '# adder_out $end
$scope module adder0 $end
$var wire 1 o" A $end
$var wire 1 (# AandB $end
$var wire 1 )# AxorB $end
$var wire 1 *# AxorBandC $end
$var wire 1 $# B $end
$var wire 1 j" carryin $end
$var wire 1 &# carryout $end
$var wire 1 '# sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[6] $end
$scope module bitslice $end
$var wire 1 +# A $end
$var wire 1 ,# B $end
$var wire 1 -# and_out $end
$var wire 1 .# c_out $end
$var wire 1 &# carry_in $end
$var wire 1 /# mux0_not $end
$var wire 1 0# mux1_not $end
$var wire 1 1# mux2_not $end
$var wire 3 2# mux_in [2:0] $end
$var wire 1 3# mux_in0 $end
$var wire 1 4# mux_in1 $end
$var wire 1 5# mux_in2 $end
$var wire 1 6# mux_in3 $end
$var wire 1 7# mux_in4 $end
$var wire 1 8# mux_in5 $end
$var wire 1 9# mux_in6 $end
$var wire 1 :# mux_in7 $end
$var wire 1 ;# nand_out $end
$var wire 1 <# nor_out $end
$var wire 1 =# or_out $end
$var wire 1 ># sub_xor_out $end
$var wire 1 ] subtract $end
$var wire 1 ?# xor_out $end
$var wire 1 @# carry_out $end
$var wire 1 A# adder_out $end
$scope module adder0 $end
$var wire 1 +# A $end
$var wire 1 B# AandB $end
$var wire 1 C# AxorB $end
$var wire 1 D# AxorBandC $end
$var wire 1 ># B $end
$var wire 1 &# carryin $end
$var wire 1 @# carryout $end
$var wire 1 A# sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[7] $end
$scope module bitslice $end
$var wire 1 E# A $end
$var wire 1 F# B $end
$var wire 1 G# and_out $end
$var wire 1 H# c_out $end
$var wire 1 @# carry_in $end
$var wire 1 I# mux0_not $end
$var wire 1 J# mux1_not $end
$var wire 1 K# mux2_not $end
$var wire 3 L# mux_in [2:0] $end
$var wire 1 M# mux_in0 $end
$var wire 1 N# mux_in1 $end
$var wire 1 O# mux_in2 $end
$var wire 1 P# mux_in3 $end
$var wire 1 Q# mux_in4 $end
$var wire 1 R# mux_in5 $end
$var wire 1 S# mux_in6 $end
$var wire 1 T# mux_in7 $end
$var wire 1 U# nand_out $end
$var wire 1 V# nor_out $end
$var wire 1 W# or_out $end
$var wire 1 X# sub_xor_out $end
$var wire 1 ] subtract $end
$var wire 1 Y# xor_out $end
$var wire 1 Z# carry_out $end
$var wire 1 [# adder_out $end
$scope module adder0 $end
$var wire 1 E# A $end
$var wire 1 \# AandB $end
$var wire 1 ]# AxorB $end
$var wire 1 ^# AxorBandC $end
$var wire 1 X# B $end
$var wire 1 @# carryin $end
$var wire 1 Z# carryout $end
$var wire 1 [# sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[8] $end
$scope module bitslice $end
$var wire 1 _# A $end
$var wire 1 `# B $end
$var wire 1 a# and_out $end
$var wire 1 b# c_out $end
$var wire 1 Z# carry_in $end
$var wire 1 c# mux0_not $end
$var wire 1 d# mux1_not $end
$var wire 1 e# mux2_not $end
$var wire 3 f# mux_in [2:0] $end
$var wire 1 g# mux_in0 $end
$var wire 1 h# mux_in1 $end
$var wire 1 i# mux_in2 $end
$var wire 1 j# mux_in3 $end
$var wire 1 k# mux_in4 $end
$var wire 1 l# mux_in5 $end
$var wire 1 m# mux_in6 $end
$var wire 1 n# mux_in7 $end
$var wire 1 o# nand_out $end
$var wire 1 p# nor_out $end
$var wire 1 q# or_out $end
$var wire 1 r# sub_xor_out $end
$var wire 1 ] subtract $end
$var wire 1 s# xor_out $end
$var wire 1 t# carry_out $end
$var wire 1 u# adder_out $end
$scope module adder0 $end
$var wire 1 _# A $end
$var wire 1 v# AandB $end
$var wire 1 w# AxorB $end
$var wire 1 x# AxorBandC $end
$var wire 1 r# B $end
$var wire 1 Z# carryin $end
$var wire 1 t# carryout $end
$var wire 1 u# sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[9] $end
$scope module bitslice $end
$var wire 1 y# A $end
$var wire 1 z# B $end
$var wire 1 {# and_out $end
$var wire 1 |# c_out $end
$var wire 1 t# carry_in $end
$var wire 1 }# mux0_not $end
$var wire 1 ~# mux1_not $end
$var wire 1 !$ mux2_not $end
$var wire 3 "$ mux_in [2:0] $end
$var wire 1 #$ mux_in0 $end
$var wire 1 $$ mux_in1 $end
$var wire 1 %$ mux_in2 $end
$var wire 1 &$ mux_in3 $end
$var wire 1 '$ mux_in4 $end
$var wire 1 ($ mux_in5 $end
$var wire 1 )$ mux_in6 $end
$var wire 1 *$ mux_in7 $end
$var wire 1 +$ nand_out $end
$var wire 1 ,$ nor_out $end
$var wire 1 -$ or_out $end
$var wire 1 .$ sub_xor_out $end
$var wire 1 ] subtract $end
$var wire 1 /$ xor_out $end
$var wire 1 0$ carry_out $end
$var wire 1 1$ adder_out $end
$scope module adder0 $end
$var wire 1 y# A $end
$var wire 1 2$ AandB $end
$var wire 1 3$ AxorB $end
$var wire 1 4$ AxorBandC $end
$var wire 1 .$ B $end
$var wire 1 t# carryin $end
$var wire 1 0$ carryout $end
$var wire 1 1$ sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[10] $end
$scope module bitslice $end
$var wire 1 5$ A $end
$var wire 1 6$ B $end
$var wire 1 7$ and_out $end
$var wire 1 8$ c_out $end
$var wire 1 0$ carry_in $end
$var wire 1 9$ mux0_not $end
$var wire 1 :$ mux1_not $end
$var wire 1 ;$ mux2_not $end
$var wire 3 <$ mux_in [2:0] $end
$var wire 1 =$ mux_in0 $end
$var wire 1 >$ mux_in1 $end
$var wire 1 ?$ mux_in2 $end
$var wire 1 @$ mux_in3 $end
$var wire 1 A$ mux_in4 $end
$var wire 1 B$ mux_in5 $end
$var wire 1 C$ mux_in6 $end
$var wire 1 D$ mux_in7 $end
$var wire 1 E$ nand_out $end
$var wire 1 F$ nor_out $end
$var wire 1 G$ or_out $end
$var wire 1 H$ sub_xor_out $end
$var wire 1 ] subtract $end
$var wire 1 I$ xor_out $end
$var wire 1 J$ carry_out $end
$var wire 1 K$ adder_out $end
$scope module adder0 $end
$var wire 1 5$ A $end
$var wire 1 L$ AandB $end
$var wire 1 M$ AxorB $end
$var wire 1 N$ AxorBandC $end
$var wire 1 H$ B $end
$var wire 1 0$ carryin $end
$var wire 1 J$ carryout $end
$var wire 1 K$ sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[11] $end
$scope module bitslice $end
$var wire 1 O$ A $end
$var wire 1 P$ B $end
$var wire 1 Q$ and_out $end
$var wire 1 R$ c_out $end
$var wire 1 J$ carry_in $end
$var wire 1 S$ mux0_not $end
$var wire 1 T$ mux1_not $end
$var wire 1 U$ mux2_not $end
$var wire 3 V$ mux_in [2:0] $end
$var wire 1 W$ mux_in0 $end
$var wire 1 X$ mux_in1 $end
$var wire 1 Y$ mux_in2 $end
$var wire 1 Z$ mux_in3 $end
$var wire 1 [$ mux_in4 $end
$var wire 1 \$ mux_in5 $end
$var wire 1 ]$ mux_in6 $end
$var wire 1 ^$ mux_in7 $end
$var wire 1 _$ nand_out $end
$var wire 1 `$ nor_out $end
$var wire 1 a$ or_out $end
$var wire 1 b$ sub_xor_out $end
$var wire 1 ] subtract $end
$var wire 1 c$ xor_out $end
$var wire 1 d$ carry_out $end
$var wire 1 e$ adder_out $end
$scope module adder0 $end
$var wire 1 O$ A $end
$var wire 1 f$ AandB $end
$var wire 1 g$ AxorB $end
$var wire 1 h$ AxorBandC $end
$var wire 1 b$ B $end
$var wire 1 J$ carryin $end
$var wire 1 d$ carryout $end
$var wire 1 e$ sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[12] $end
$scope module bitslice $end
$var wire 1 i$ A $end
$var wire 1 j$ B $end
$var wire 1 k$ and_out $end
$var wire 1 l$ c_out $end
$var wire 1 d$ carry_in $end
$var wire 1 m$ mux0_not $end
$var wire 1 n$ mux1_not $end
$var wire 1 o$ mux2_not $end
$var wire 3 p$ mux_in [2:0] $end
$var wire 1 q$ mux_in0 $end
$var wire 1 r$ mux_in1 $end
$var wire 1 s$ mux_in2 $end
$var wire 1 t$ mux_in3 $end
$var wire 1 u$ mux_in4 $end
$var wire 1 v$ mux_in5 $end
$var wire 1 w$ mux_in6 $end
$var wire 1 x$ mux_in7 $end
$var wire 1 y$ nand_out $end
$var wire 1 z$ nor_out $end
$var wire 1 {$ or_out $end
$var wire 1 |$ sub_xor_out $end
$var wire 1 ] subtract $end
$var wire 1 }$ xor_out $end
$var wire 1 ~$ carry_out $end
$var wire 1 !% adder_out $end
$scope module adder0 $end
$var wire 1 i$ A $end
$var wire 1 "% AandB $end
$var wire 1 #% AxorB $end
$var wire 1 $% AxorBandC $end
$var wire 1 |$ B $end
$var wire 1 d$ carryin $end
$var wire 1 ~$ carryout $end
$var wire 1 !% sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[13] $end
$scope module bitslice $end
$var wire 1 %% A $end
$var wire 1 &% B $end
$var wire 1 '% and_out $end
$var wire 1 (% c_out $end
$var wire 1 ~$ carry_in $end
$var wire 1 )% mux0_not $end
$var wire 1 *% mux1_not $end
$var wire 1 +% mux2_not $end
$var wire 3 ,% mux_in [2:0] $end
$var wire 1 -% mux_in0 $end
$var wire 1 .% mux_in1 $end
$var wire 1 /% mux_in2 $end
$var wire 1 0% mux_in3 $end
$var wire 1 1% mux_in4 $end
$var wire 1 2% mux_in5 $end
$var wire 1 3% mux_in6 $end
$var wire 1 4% mux_in7 $end
$var wire 1 5% nand_out $end
$var wire 1 6% nor_out $end
$var wire 1 7% or_out $end
$var wire 1 8% sub_xor_out $end
$var wire 1 ] subtract $end
$var wire 1 9% xor_out $end
$var wire 1 :% carry_out $end
$var wire 1 ;% adder_out $end
$scope module adder0 $end
$var wire 1 %% A $end
$var wire 1 <% AandB $end
$var wire 1 =% AxorB $end
$var wire 1 >% AxorBandC $end
$var wire 1 8% B $end
$var wire 1 ~$ carryin $end
$var wire 1 :% carryout $end
$var wire 1 ;% sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[14] $end
$scope module bitslice $end
$var wire 1 ?% A $end
$var wire 1 @% B $end
$var wire 1 A% and_out $end
$var wire 1 B% c_out $end
$var wire 1 :% carry_in $end
$var wire 1 C% mux0_not $end
$var wire 1 D% mux1_not $end
$var wire 1 E% mux2_not $end
$var wire 3 F% mux_in [2:0] $end
$var wire 1 G% mux_in0 $end
$var wire 1 H% mux_in1 $end
$var wire 1 I% mux_in2 $end
$var wire 1 J% mux_in3 $end
$var wire 1 K% mux_in4 $end
$var wire 1 L% mux_in5 $end
$var wire 1 M% mux_in6 $end
$var wire 1 N% mux_in7 $end
$var wire 1 O% nand_out $end
$var wire 1 P% nor_out $end
$var wire 1 Q% or_out $end
$var wire 1 R% sub_xor_out $end
$var wire 1 ] subtract $end
$var wire 1 S% xor_out $end
$var wire 1 T% carry_out $end
$var wire 1 U% adder_out $end
$scope module adder0 $end
$var wire 1 ?% A $end
$var wire 1 V% AandB $end
$var wire 1 W% AxorB $end
$var wire 1 X% AxorBandC $end
$var wire 1 R% B $end
$var wire 1 :% carryin $end
$var wire 1 T% carryout $end
$var wire 1 U% sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[15] $end
$scope module bitslice $end
$var wire 1 Y% A $end
$var wire 1 Z% B $end
$var wire 1 [% and_out $end
$var wire 1 \% c_out $end
$var wire 1 T% carry_in $end
$var wire 1 ]% mux0_not $end
$var wire 1 ^% mux1_not $end
$var wire 1 _% mux2_not $end
$var wire 3 `% mux_in [2:0] $end
$var wire 1 a% mux_in0 $end
$var wire 1 b% mux_in1 $end
$var wire 1 c% mux_in2 $end
$var wire 1 d% mux_in3 $end
$var wire 1 e% mux_in4 $end
$var wire 1 f% mux_in5 $end
$var wire 1 g% mux_in6 $end
$var wire 1 h% mux_in7 $end
$var wire 1 i% nand_out $end
$var wire 1 j% nor_out $end
$var wire 1 k% or_out $end
$var wire 1 l% sub_xor_out $end
$var wire 1 ] subtract $end
$var wire 1 m% xor_out $end
$var wire 1 n% carry_out $end
$var wire 1 o% adder_out $end
$scope module adder0 $end
$var wire 1 Y% A $end
$var wire 1 p% AandB $end
$var wire 1 q% AxorB $end
$var wire 1 r% AxorBandC $end
$var wire 1 l% B $end
$var wire 1 T% carryin $end
$var wire 1 n% carryout $end
$var wire 1 o% sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[16] $end
$scope module bitslice $end
$var wire 1 s% A $end
$var wire 1 t% B $end
$var wire 1 u% and_out $end
$var wire 1 v% c_out $end
$var wire 1 n% carry_in $end
$var wire 1 w% mux0_not $end
$var wire 1 x% mux1_not $end
$var wire 1 y% mux2_not $end
$var wire 3 z% mux_in [2:0] $end
$var wire 1 {% mux_in0 $end
$var wire 1 |% mux_in1 $end
$var wire 1 }% mux_in2 $end
$var wire 1 ~% mux_in3 $end
$var wire 1 !& mux_in4 $end
$var wire 1 "& mux_in5 $end
$var wire 1 #& mux_in6 $end
$var wire 1 $& mux_in7 $end
$var wire 1 %& nand_out $end
$var wire 1 && nor_out $end
$var wire 1 '& or_out $end
$var wire 1 (& sub_xor_out $end
$var wire 1 ] subtract $end
$var wire 1 )& xor_out $end
$var wire 1 *& carry_out $end
$var wire 1 +& adder_out $end
$scope module adder0 $end
$var wire 1 s% A $end
$var wire 1 ,& AandB $end
$var wire 1 -& AxorB $end
$var wire 1 .& AxorBandC $end
$var wire 1 (& B $end
$var wire 1 n% carryin $end
$var wire 1 *& carryout $end
$var wire 1 +& sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[17] $end
$scope module bitslice $end
$var wire 1 /& A $end
$var wire 1 0& B $end
$var wire 1 1& and_out $end
$var wire 1 2& c_out $end
$var wire 1 *& carry_in $end
$var wire 1 3& mux0_not $end
$var wire 1 4& mux1_not $end
$var wire 1 5& mux2_not $end
$var wire 3 6& mux_in [2:0] $end
$var wire 1 7& mux_in0 $end
$var wire 1 8& mux_in1 $end
$var wire 1 9& mux_in2 $end
$var wire 1 :& mux_in3 $end
$var wire 1 ;& mux_in4 $end
$var wire 1 <& mux_in5 $end
$var wire 1 =& mux_in6 $end
$var wire 1 >& mux_in7 $end
$var wire 1 ?& nand_out $end
$var wire 1 @& nor_out $end
$var wire 1 A& or_out $end
$var wire 1 B& sub_xor_out $end
$var wire 1 ] subtract $end
$var wire 1 C& xor_out $end
$var wire 1 D& carry_out $end
$var wire 1 E& adder_out $end
$scope module adder0 $end
$var wire 1 /& A $end
$var wire 1 F& AandB $end
$var wire 1 G& AxorB $end
$var wire 1 H& AxorBandC $end
$var wire 1 B& B $end
$var wire 1 *& carryin $end
$var wire 1 D& carryout $end
$var wire 1 E& sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[18] $end
$scope module bitslice $end
$var wire 1 I& A $end
$var wire 1 J& B $end
$var wire 1 K& and_out $end
$var wire 1 L& c_out $end
$var wire 1 D& carry_in $end
$var wire 1 M& mux0_not $end
$var wire 1 N& mux1_not $end
$var wire 1 O& mux2_not $end
$var wire 3 P& mux_in [2:0] $end
$var wire 1 Q& mux_in0 $end
$var wire 1 R& mux_in1 $end
$var wire 1 S& mux_in2 $end
$var wire 1 T& mux_in3 $end
$var wire 1 U& mux_in4 $end
$var wire 1 V& mux_in5 $end
$var wire 1 W& mux_in6 $end
$var wire 1 X& mux_in7 $end
$var wire 1 Y& nand_out $end
$var wire 1 Z& nor_out $end
$var wire 1 [& or_out $end
$var wire 1 \& sub_xor_out $end
$var wire 1 ] subtract $end
$var wire 1 ]& xor_out $end
$var wire 1 ^& carry_out $end
$var wire 1 _& adder_out $end
$scope module adder0 $end
$var wire 1 I& A $end
$var wire 1 `& AandB $end
$var wire 1 a& AxorB $end
$var wire 1 b& AxorBandC $end
$var wire 1 \& B $end
$var wire 1 D& carryin $end
$var wire 1 ^& carryout $end
$var wire 1 _& sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[19] $end
$scope module bitslice $end
$var wire 1 c& A $end
$var wire 1 d& B $end
$var wire 1 e& and_out $end
$var wire 1 f& c_out $end
$var wire 1 ^& carry_in $end
$var wire 1 g& mux0_not $end
$var wire 1 h& mux1_not $end
$var wire 1 i& mux2_not $end
$var wire 3 j& mux_in [2:0] $end
$var wire 1 k& mux_in0 $end
$var wire 1 l& mux_in1 $end
$var wire 1 m& mux_in2 $end
$var wire 1 n& mux_in3 $end
$var wire 1 o& mux_in4 $end
$var wire 1 p& mux_in5 $end
$var wire 1 q& mux_in6 $end
$var wire 1 r& mux_in7 $end
$var wire 1 s& nand_out $end
$var wire 1 t& nor_out $end
$var wire 1 u& or_out $end
$var wire 1 v& sub_xor_out $end
$var wire 1 ] subtract $end
$var wire 1 w& xor_out $end
$var wire 1 x& carry_out $end
$var wire 1 y& adder_out $end
$scope module adder0 $end
$var wire 1 c& A $end
$var wire 1 z& AandB $end
$var wire 1 {& AxorB $end
$var wire 1 |& AxorBandC $end
$var wire 1 v& B $end
$var wire 1 ^& carryin $end
$var wire 1 x& carryout $end
$var wire 1 y& sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[20] $end
$scope module bitslice $end
$var wire 1 }& A $end
$var wire 1 ~& B $end
$var wire 1 !' and_out $end
$var wire 1 "' c_out $end
$var wire 1 x& carry_in $end
$var wire 1 #' mux0_not $end
$var wire 1 $' mux1_not $end
$var wire 1 %' mux2_not $end
$var wire 3 &' mux_in [2:0] $end
$var wire 1 '' mux_in0 $end
$var wire 1 (' mux_in1 $end
$var wire 1 )' mux_in2 $end
$var wire 1 *' mux_in3 $end
$var wire 1 +' mux_in4 $end
$var wire 1 ,' mux_in5 $end
$var wire 1 -' mux_in6 $end
$var wire 1 .' mux_in7 $end
$var wire 1 /' nand_out $end
$var wire 1 0' nor_out $end
$var wire 1 1' or_out $end
$var wire 1 2' sub_xor_out $end
$var wire 1 ] subtract $end
$var wire 1 3' xor_out $end
$var wire 1 4' carry_out $end
$var wire 1 5' adder_out $end
$scope module adder0 $end
$var wire 1 }& A $end
$var wire 1 6' AandB $end
$var wire 1 7' AxorB $end
$var wire 1 8' AxorBandC $end
$var wire 1 2' B $end
$var wire 1 x& carryin $end
$var wire 1 4' carryout $end
$var wire 1 5' sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[21] $end
$scope module bitslice $end
$var wire 1 9' A $end
$var wire 1 :' B $end
$var wire 1 ;' and_out $end
$var wire 1 <' c_out $end
$var wire 1 4' carry_in $end
$var wire 1 =' mux0_not $end
$var wire 1 >' mux1_not $end
$var wire 1 ?' mux2_not $end
$var wire 3 @' mux_in [2:0] $end
$var wire 1 A' mux_in0 $end
$var wire 1 B' mux_in1 $end
$var wire 1 C' mux_in2 $end
$var wire 1 D' mux_in3 $end
$var wire 1 E' mux_in4 $end
$var wire 1 F' mux_in5 $end
$var wire 1 G' mux_in6 $end
$var wire 1 H' mux_in7 $end
$var wire 1 I' nand_out $end
$var wire 1 J' nor_out $end
$var wire 1 K' or_out $end
$var wire 1 L' sub_xor_out $end
$var wire 1 ] subtract $end
$var wire 1 M' xor_out $end
$var wire 1 N' carry_out $end
$var wire 1 O' adder_out $end
$scope module adder0 $end
$var wire 1 9' A $end
$var wire 1 P' AandB $end
$var wire 1 Q' AxorB $end
$var wire 1 R' AxorBandC $end
$var wire 1 L' B $end
$var wire 1 4' carryin $end
$var wire 1 N' carryout $end
$var wire 1 O' sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[22] $end
$scope module bitslice $end
$var wire 1 S' A $end
$var wire 1 T' B $end
$var wire 1 U' and_out $end
$var wire 1 V' c_out $end
$var wire 1 N' carry_in $end
$var wire 1 W' mux0_not $end
$var wire 1 X' mux1_not $end
$var wire 1 Y' mux2_not $end
$var wire 3 Z' mux_in [2:0] $end
$var wire 1 [' mux_in0 $end
$var wire 1 \' mux_in1 $end
$var wire 1 ]' mux_in2 $end
$var wire 1 ^' mux_in3 $end
$var wire 1 _' mux_in4 $end
$var wire 1 `' mux_in5 $end
$var wire 1 a' mux_in6 $end
$var wire 1 b' mux_in7 $end
$var wire 1 c' nand_out $end
$var wire 1 d' nor_out $end
$var wire 1 e' or_out $end
$var wire 1 f' sub_xor_out $end
$var wire 1 ] subtract $end
$var wire 1 g' xor_out $end
$var wire 1 h' carry_out $end
$var wire 1 i' adder_out $end
$scope module adder0 $end
$var wire 1 S' A $end
$var wire 1 j' AandB $end
$var wire 1 k' AxorB $end
$var wire 1 l' AxorBandC $end
$var wire 1 f' B $end
$var wire 1 N' carryin $end
$var wire 1 h' carryout $end
$var wire 1 i' sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[23] $end
$scope module bitslice $end
$var wire 1 m' A $end
$var wire 1 n' B $end
$var wire 1 o' and_out $end
$var wire 1 p' c_out $end
$var wire 1 h' carry_in $end
$var wire 1 q' mux0_not $end
$var wire 1 r' mux1_not $end
$var wire 1 s' mux2_not $end
$var wire 3 t' mux_in [2:0] $end
$var wire 1 u' mux_in0 $end
$var wire 1 v' mux_in1 $end
$var wire 1 w' mux_in2 $end
$var wire 1 x' mux_in3 $end
$var wire 1 y' mux_in4 $end
$var wire 1 z' mux_in5 $end
$var wire 1 {' mux_in6 $end
$var wire 1 |' mux_in7 $end
$var wire 1 }' nand_out $end
$var wire 1 ~' nor_out $end
$var wire 1 !( or_out $end
$var wire 1 "( sub_xor_out $end
$var wire 1 ] subtract $end
$var wire 1 #( xor_out $end
$var wire 1 $( carry_out $end
$var wire 1 %( adder_out $end
$scope module adder0 $end
$var wire 1 m' A $end
$var wire 1 &( AandB $end
$var wire 1 '( AxorB $end
$var wire 1 (( AxorBandC $end
$var wire 1 "( B $end
$var wire 1 h' carryin $end
$var wire 1 $( carryout $end
$var wire 1 %( sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[24] $end
$scope module bitslice $end
$var wire 1 )( A $end
$var wire 1 *( B $end
$var wire 1 +( and_out $end
$var wire 1 ,( c_out $end
$var wire 1 $( carry_in $end
$var wire 1 -( mux0_not $end
$var wire 1 .( mux1_not $end
$var wire 1 /( mux2_not $end
$var wire 3 0( mux_in [2:0] $end
$var wire 1 1( mux_in0 $end
$var wire 1 2( mux_in1 $end
$var wire 1 3( mux_in2 $end
$var wire 1 4( mux_in3 $end
$var wire 1 5( mux_in4 $end
$var wire 1 6( mux_in5 $end
$var wire 1 7( mux_in6 $end
$var wire 1 8( mux_in7 $end
$var wire 1 9( nand_out $end
$var wire 1 :( nor_out $end
$var wire 1 ;( or_out $end
$var wire 1 <( sub_xor_out $end
$var wire 1 ] subtract $end
$var wire 1 =( xor_out $end
$var wire 1 >( carry_out $end
$var wire 1 ?( adder_out $end
$scope module adder0 $end
$var wire 1 )( A $end
$var wire 1 @( AandB $end
$var wire 1 A( AxorB $end
$var wire 1 B( AxorBandC $end
$var wire 1 <( B $end
$var wire 1 $( carryin $end
$var wire 1 >( carryout $end
$var wire 1 ?( sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[25] $end
$scope module bitslice $end
$var wire 1 C( A $end
$var wire 1 D( B $end
$var wire 1 E( and_out $end
$var wire 1 F( c_out $end
$var wire 1 >( carry_in $end
$var wire 1 G( mux0_not $end
$var wire 1 H( mux1_not $end
$var wire 1 I( mux2_not $end
$var wire 3 J( mux_in [2:0] $end
$var wire 1 K( mux_in0 $end
$var wire 1 L( mux_in1 $end
$var wire 1 M( mux_in2 $end
$var wire 1 N( mux_in3 $end
$var wire 1 O( mux_in4 $end
$var wire 1 P( mux_in5 $end
$var wire 1 Q( mux_in6 $end
$var wire 1 R( mux_in7 $end
$var wire 1 S( nand_out $end
$var wire 1 T( nor_out $end
$var wire 1 U( or_out $end
$var wire 1 V( sub_xor_out $end
$var wire 1 ] subtract $end
$var wire 1 W( xor_out $end
$var wire 1 X( carry_out $end
$var wire 1 Y( adder_out $end
$scope module adder0 $end
$var wire 1 C( A $end
$var wire 1 Z( AandB $end
$var wire 1 [( AxorB $end
$var wire 1 \( AxorBandC $end
$var wire 1 V( B $end
$var wire 1 >( carryin $end
$var wire 1 X( carryout $end
$var wire 1 Y( sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[26] $end
$scope module bitslice $end
$var wire 1 ]( A $end
$var wire 1 ^( B $end
$var wire 1 _( and_out $end
$var wire 1 `( c_out $end
$var wire 1 X( carry_in $end
$var wire 1 a( mux0_not $end
$var wire 1 b( mux1_not $end
$var wire 1 c( mux2_not $end
$var wire 3 d( mux_in [2:0] $end
$var wire 1 e( mux_in0 $end
$var wire 1 f( mux_in1 $end
$var wire 1 g( mux_in2 $end
$var wire 1 h( mux_in3 $end
$var wire 1 i( mux_in4 $end
$var wire 1 j( mux_in5 $end
$var wire 1 k( mux_in6 $end
$var wire 1 l( mux_in7 $end
$var wire 1 m( nand_out $end
$var wire 1 n( nor_out $end
$var wire 1 o( or_out $end
$var wire 1 p( sub_xor_out $end
$var wire 1 ] subtract $end
$var wire 1 q( xor_out $end
$var wire 1 r( carry_out $end
$var wire 1 s( adder_out $end
$scope module adder0 $end
$var wire 1 ]( A $end
$var wire 1 t( AandB $end
$var wire 1 u( AxorB $end
$var wire 1 v( AxorBandC $end
$var wire 1 p( B $end
$var wire 1 X( carryin $end
$var wire 1 r( carryout $end
$var wire 1 s( sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[27] $end
$scope module bitslice $end
$var wire 1 w( A $end
$var wire 1 x( B $end
$var wire 1 y( and_out $end
$var wire 1 z( c_out $end
$var wire 1 r( carry_in $end
$var wire 1 {( mux0_not $end
$var wire 1 |( mux1_not $end
$var wire 1 }( mux2_not $end
$var wire 3 ~( mux_in [2:0] $end
$var wire 1 !) mux_in0 $end
$var wire 1 ") mux_in1 $end
$var wire 1 #) mux_in2 $end
$var wire 1 $) mux_in3 $end
$var wire 1 %) mux_in4 $end
$var wire 1 &) mux_in5 $end
$var wire 1 ') mux_in6 $end
$var wire 1 () mux_in7 $end
$var wire 1 )) nand_out $end
$var wire 1 *) nor_out $end
$var wire 1 +) or_out $end
$var wire 1 ,) sub_xor_out $end
$var wire 1 ] subtract $end
$var wire 1 -) xor_out $end
$var wire 1 .) carry_out $end
$var wire 1 /) adder_out $end
$scope module adder0 $end
$var wire 1 w( A $end
$var wire 1 0) AandB $end
$var wire 1 1) AxorB $end
$var wire 1 2) AxorBandC $end
$var wire 1 ,) B $end
$var wire 1 r( carryin $end
$var wire 1 .) carryout $end
$var wire 1 /) sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[28] $end
$scope module bitslice $end
$var wire 1 3) A $end
$var wire 1 4) B $end
$var wire 1 5) and_out $end
$var wire 1 6) c_out $end
$var wire 1 .) carry_in $end
$var wire 1 7) mux0_not $end
$var wire 1 8) mux1_not $end
$var wire 1 9) mux2_not $end
$var wire 3 :) mux_in [2:0] $end
$var wire 1 ;) mux_in0 $end
$var wire 1 <) mux_in1 $end
$var wire 1 =) mux_in2 $end
$var wire 1 >) mux_in3 $end
$var wire 1 ?) mux_in4 $end
$var wire 1 @) mux_in5 $end
$var wire 1 A) mux_in6 $end
$var wire 1 B) mux_in7 $end
$var wire 1 C) nand_out $end
$var wire 1 D) nor_out $end
$var wire 1 E) or_out $end
$var wire 1 F) sub_xor_out $end
$var wire 1 ] subtract $end
$var wire 1 G) xor_out $end
$var wire 1 H) carry_out $end
$var wire 1 I) adder_out $end
$scope module adder0 $end
$var wire 1 3) A $end
$var wire 1 J) AandB $end
$var wire 1 K) AxorB $end
$var wire 1 L) AxorBandC $end
$var wire 1 F) B $end
$var wire 1 .) carryin $end
$var wire 1 H) carryout $end
$var wire 1 I) sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[29] $end
$scope module bitslice $end
$var wire 1 M) A $end
$var wire 1 N) B $end
$var wire 1 O) and_out $end
$var wire 1 P) c_out $end
$var wire 1 H) carry_in $end
$var wire 1 Q) mux0_not $end
$var wire 1 R) mux1_not $end
$var wire 1 S) mux2_not $end
$var wire 3 T) mux_in [2:0] $end
$var wire 1 U) mux_in0 $end
$var wire 1 V) mux_in1 $end
$var wire 1 W) mux_in2 $end
$var wire 1 X) mux_in3 $end
$var wire 1 Y) mux_in4 $end
$var wire 1 Z) mux_in5 $end
$var wire 1 [) mux_in6 $end
$var wire 1 \) mux_in7 $end
$var wire 1 ]) nand_out $end
$var wire 1 ^) nor_out $end
$var wire 1 _) or_out $end
$var wire 1 `) sub_xor_out $end
$var wire 1 ] subtract $end
$var wire 1 a) xor_out $end
$var wire 1 b) carry_out $end
$var wire 1 c) adder_out $end
$scope module adder0 $end
$var wire 1 M) A $end
$var wire 1 d) AandB $end
$var wire 1 e) AxorB $end
$var wire 1 f) AxorBandC $end
$var wire 1 `) B $end
$var wire 1 H) carryin $end
$var wire 1 b) carryout $end
$var wire 1 c) sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[30] $end
$scope module bitslice $end
$var wire 1 g) A $end
$var wire 1 h) B $end
$var wire 1 i) and_out $end
$var wire 1 j) c_out $end
$var wire 1 b) carry_in $end
$var wire 1 k) mux0_not $end
$var wire 1 l) mux1_not $end
$var wire 1 m) mux2_not $end
$var wire 3 n) mux_in [2:0] $end
$var wire 1 o) mux_in0 $end
$var wire 1 p) mux_in1 $end
$var wire 1 q) mux_in2 $end
$var wire 1 r) mux_in3 $end
$var wire 1 s) mux_in4 $end
$var wire 1 t) mux_in5 $end
$var wire 1 u) mux_in6 $end
$var wire 1 v) mux_in7 $end
$var wire 1 w) nand_out $end
$var wire 1 x) nor_out $end
$var wire 1 y) or_out $end
$var wire 1 z) sub_xor_out $end
$var wire 1 ] subtract $end
$var wire 1 {) xor_out $end
$var wire 1 |) carry_out $end
$var wire 1 }) adder_out $end
$scope module adder0 $end
$var wire 1 g) A $end
$var wire 1 ~) AandB $end
$var wire 1 !* AxorB $end
$var wire 1 "* AxorBandC $end
$var wire 1 z) B $end
$var wire 1 b) carryin $end
$var wire 1 |) carryout $end
$var wire 1 }) sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[31] $end
$scope module bitslice $end
$var wire 1 #* A $end
$var wire 1 $* B $end
$var wire 1 %* and_out $end
$var wire 1 &* c_out $end
$var wire 1 |) carry_in $end
$var wire 1 '* mux0_not $end
$var wire 1 (* mux1_not $end
$var wire 1 )* mux2_not $end
$var wire 3 ** mux_in [2:0] $end
$var wire 1 +* mux_in0 $end
$var wire 1 ,* mux_in1 $end
$var wire 1 -* mux_in2 $end
$var wire 1 .* mux_in3 $end
$var wire 1 /* mux_in4 $end
$var wire 1 0* mux_in5 $end
$var wire 1 1* mux_in6 $end
$var wire 1 2* mux_in7 $end
$var wire 1 3* nand_out $end
$var wire 1 4* nor_out $end
$var wire 1 5* or_out $end
$var wire 1 6* sub_xor_out $end
$var wire 1 ] subtract $end
$var wire 1 7* xor_out $end
$var wire 1 8* carry_out $end
$var wire 1 9* adder_out $end
$scope module adder0 $end
$var wire 1 #* A $end
$var wire 1 :* AandB $end
$var wire 1 ;* AxorB $end
$var wire 1 <* AxorBandC $end
$var wire 1 6* B $end
$var wire 1 |) carryin $end
$var wire 1 8* carryout $end
$var wire 1 9* sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module LUT $end
$var wire 3 =* ALUcommand [2:0] $end
$var reg 1 c alu_code0 $end
$var reg 1 b alu_code1 $end
$var reg 1 a alu_code2 $end
$var reg 1 _ set_flags $end
$var reg 1 ^ slt_enable $end
$var reg 1 ] subtract $end
$upscope $end
$scope module bitslice0 $end
$var wire 1 >* A $end
$var wire 1 ?* B $end
$var wire 1 @* and_out $end
$var wire 1 A* c_out $end
$var wire 1 ] carry_in $end
$var wire 1 B* mux0_not $end
$var wire 1 C* mux1_not $end
$var wire 1 D* mux2_not $end
$var wire 3 E* mux_in [2:0] $end
$var wire 1 F* mux_in0 $end
$var wire 1 G* mux_in1 $end
$var wire 1 H* mux_in2 $end
$var wire 1 I* mux_in3 $end
$var wire 1 J* mux_in4 $end
$var wire 1 K* mux_in5 $end
$var wire 1 L* mux_in6 $end
$var wire 1 M* mux_in7 $end
$var wire 1 N* nand_out $end
$var wire 1 O* nor_out $end
$var wire 1 P* or_out $end
$var wire 1 Q* sub_xor_out $end
$var wire 1 ] subtract $end
$var wire 1 R* xor_out $end
$var wire 1 h carry_out $end
$var wire 1 S* adder_out $end
$scope module adder0 $end
$var wire 1 >* A $end
$var wire 1 T* AandB $end
$var wire 1 U* AxorB $end
$var wire 1 V* AxorBandC $end
$var wire 1 Q* B $end
$var wire 1 ] carryin $end
$var wire 1 h carryout $end
$var wire 1 S* sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module dec $end
$var wire 1 W* add $end
$var wire 1 3 immSel $end
$var wire 1 X* jr $end
$var wire 1 % memAddrSel $end
$var wire 1 . memWrEn $end
$var wire 1 Y* slt $end
$var wire 1 Z* sub $end
$var wire 1 [* xori $end
$var wire 1 \* sw $end
$var wire 1 ) regWrEn $end
$var wire 2 ]* pcSel [1:0] $end
$var wire 6 ^* opcode [5:0] $end
$var wire 1 _* lw $end
$var wire 26 `* jumpAddr [25:0] $end
$var wire 1 a* jal $end
$var wire 2 b* jSel [1:0] $end
$var wire 1 c* j $end
$var wire 16 d* imm [15:0] $end
$var wire 6 e* funct [5:0] $end
$var wire 32 f* cmd [31:0] $end
$var wire 1 g* bne $end
$var wire 1 h* beq $end
$var wire 3 i* aluOp [2:0] $end
$var wire 1 j* addi $end
$var wire 2 k* DwSel [1:0] $end
$var wire 5 l* Aw [4:0] $end
$var wire 5 m* Ab [4:0] $end
$var wire 5 n* Aa [4:0] $end
$upscope $end
$scope module dm $end
$var wire 10 o* Addr [9:0] $end
$var wire 10 p* CmdAddr [9:0] $end
$var wire 32 q* CmdOut [31:0] $end
$var wire 32 r* DataOut [31:0] $end
$var wire 1 $ clk $end
$var wire 1 . regWE $end
$var wire 32 s* DataIn [31:0] $end
$upscope $end
$scope module immExter $end
$var wire 16 t* imm [15:0] $end
$var wire 32 u* immExt [31:0] $end
$upscope $end
$scope module pcAddMux $end
$var wire 1 v* dumbledore $end
$var wire 32 w* harry [31:0] $end
$var wire 32 x* neville [31:0] $end
$var wire 32 y* chosenOne [31:0] $end
$upscope $end
$scope module pcAlu $end
$var wire 1 z* SLT_internal $end
$var wire 1 {* carryout $end
$var wire 3 |* command [2:0] $end
$var wire 1 }* nb $end
$var wire 1 ~* nout $end
$var wire 1 !+ nslt_enable $end
$var wire 32 "+ operandA [31:0] $end
$var wire 32 #+ operandB [31:0] $end
$var wire 1 $+ overflow $end
$var wire 1 %+ overflow_internal $end
$var wire 1 &+ slt_a_and $end
$var wire 1 '+ slt_ab_and $end
$var wire 1 (+ slt_b_and $end
$var wire 1 )+ slt_final $end
$var wire 1 *+ slt_nand $end
$var wire 1 ++ zero $end
$var wire 1 ,+ zero_nor $end
$var wire 1 -+ subtract $end
$var wire 1 .+ slt_enable $end
$var wire 1 /+ set_flags $end
$var wire 32 0+ result [31:0] $end
$var wire 1 1+ alu_code_internal2 $end
$var wire 1 2+ alu_code_internal1 $end
$var wire 1 3+ alu_code_internal0 $end
$scope begin genblock[1] $end
$scope module bitslice $end
$var wire 1 4+ A $end
$var wire 1 5+ B $end
$var wire 1 6+ and_out $end
$var wire 1 7+ c_out $end
$var wire 1 8+ carry_in $end
$var wire 1 9+ mux0_not $end
$var wire 1 :+ mux1_not $end
$var wire 1 ;+ mux2_not $end
$var wire 3 <+ mux_in [2:0] $end
$var wire 1 =+ mux_in0 $end
$var wire 1 >+ mux_in1 $end
$var wire 1 ?+ mux_in2 $end
$var wire 1 @+ mux_in3 $end
$var wire 1 A+ mux_in4 $end
$var wire 1 B+ mux_in5 $end
$var wire 1 C+ mux_in6 $end
$var wire 1 D+ mux_in7 $end
$var wire 1 E+ nand_out $end
$var wire 1 F+ nor_out $end
$var wire 1 G+ or_out $end
$var wire 1 H+ sub_xor_out $end
$var wire 1 -+ subtract $end
$var wire 1 I+ xor_out $end
$var wire 1 J+ carry_out $end
$var wire 1 K+ adder_out $end
$scope module adder0 $end
$var wire 1 4+ A $end
$var wire 1 L+ AandB $end
$var wire 1 M+ AxorB $end
$var wire 1 N+ AxorBandC $end
$var wire 1 H+ B $end
$var wire 1 8+ carryin $end
$var wire 1 J+ carryout $end
$var wire 1 K+ sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[2] $end
$scope module bitslice $end
$var wire 1 O+ A $end
$var wire 1 P+ B $end
$var wire 1 Q+ and_out $end
$var wire 1 R+ c_out $end
$var wire 1 J+ carry_in $end
$var wire 1 S+ mux0_not $end
$var wire 1 T+ mux1_not $end
$var wire 1 U+ mux2_not $end
$var wire 3 V+ mux_in [2:0] $end
$var wire 1 W+ mux_in0 $end
$var wire 1 X+ mux_in1 $end
$var wire 1 Y+ mux_in2 $end
$var wire 1 Z+ mux_in3 $end
$var wire 1 [+ mux_in4 $end
$var wire 1 \+ mux_in5 $end
$var wire 1 ]+ mux_in6 $end
$var wire 1 ^+ mux_in7 $end
$var wire 1 _+ nand_out $end
$var wire 1 `+ nor_out $end
$var wire 1 a+ or_out $end
$var wire 1 b+ sub_xor_out $end
$var wire 1 -+ subtract $end
$var wire 1 c+ xor_out $end
$var wire 1 d+ carry_out $end
$var wire 1 e+ adder_out $end
$scope module adder0 $end
$var wire 1 O+ A $end
$var wire 1 f+ AandB $end
$var wire 1 g+ AxorB $end
$var wire 1 h+ AxorBandC $end
$var wire 1 b+ B $end
$var wire 1 J+ carryin $end
$var wire 1 d+ carryout $end
$var wire 1 e+ sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[3] $end
$scope module bitslice $end
$var wire 1 i+ A $end
$var wire 1 j+ B $end
$var wire 1 k+ and_out $end
$var wire 1 l+ c_out $end
$var wire 1 d+ carry_in $end
$var wire 1 m+ mux0_not $end
$var wire 1 n+ mux1_not $end
$var wire 1 o+ mux2_not $end
$var wire 3 p+ mux_in [2:0] $end
$var wire 1 q+ mux_in0 $end
$var wire 1 r+ mux_in1 $end
$var wire 1 s+ mux_in2 $end
$var wire 1 t+ mux_in3 $end
$var wire 1 u+ mux_in4 $end
$var wire 1 v+ mux_in5 $end
$var wire 1 w+ mux_in6 $end
$var wire 1 x+ mux_in7 $end
$var wire 1 y+ nand_out $end
$var wire 1 z+ nor_out $end
$var wire 1 {+ or_out $end
$var wire 1 |+ sub_xor_out $end
$var wire 1 -+ subtract $end
$var wire 1 }+ xor_out $end
$var wire 1 ~+ carry_out $end
$var wire 1 !, adder_out $end
$scope module adder0 $end
$var wire 1 i+ A $end
$var wire 1 ", AandB $end
$var wire 1 #, AxorB $end
$var wire 1 $, AxorBandC $end
$var wire 1 |+ B $end
$var wire 1 d+ carryin $end
$var wire 1 ~+ carryout $end
$var wire 1 !, sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[4] $end
$scope module bitslice $end
$var wire 1 %, A $end
$var wire 1 &, B $end
$var wire 1 ', and_out $end
$var wire 1 (, c_out $end
$var wire 1 ~+ carry_in $end
$var wire 1 ), mux0_not $end
$var wire 1 *, mux1_not $end
$var wire 1 +, mux2_not $end
$var wire 3 ,, mux_in [2:0] $end
$var wire 1 -, mux_in0 $end
$var wire 1 ., mux_in1 $end
$var wire 1 /, mux_in2 $end
$var wire 1 0, mux_in3 $end
$var wire 1 1, mux_in4 $end
$var wire 1 2, mux_in5 $end
$var wire 1 3, mux_in6 $end
$var wire 1 4, mux_in7 $end
$var wire 1 5, nand_out $end
$var wire 1 6, nor_out $end
$var wire 1 7, or_out $end
$var wire 1 8, sub_xor_out $end
$var wire 1 -+ subtract $end
$var wire 1 9, xor_out $end
$var wire 1 :, carry_out $end
$var wire 1 ;, adder_out $end
$scope module adder0 $end
$var wire 1 %, A $end
$var wire 1 <, AandB $end
$var wire 1 =, AxorB $end
$var wire 1 >, AxorBandC $end
$var wire 1 8, B $end
$var wire 1 ~+ carryin $end
$var wire 1 :, carryout $end
$var wire 1 ;, sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[5] $end
$scope module bitslice $end
$var wire 1 ?, A $end
$var wire 1 @, B $end
$var wire 1 A, and_out $end
$var wire 1 B, c_out $end
$var wire 1 :, carry_in $end
$var wire 1 C, mux0_not $end
$var wire 1 D, mux1_not $end
$var wire 1 E, mux2_not $end
$var wire 3 F, mux_in [2:0] $end
$var wire 1 G, mux_in0 $end
$var wire 1 H, mux_in1 $end
$var wire 1 I, mux_in2 $end
$var wire 1 J, mux_in3 $end
$var wire 1 K, mux_in4 $end
$var wire 1 L, mux_in5 $end
$var wire 1 M, mux_in6 $end
$var wire 1 N, mux_in7 $end
$var wire 1 O, nand_out $end
$var wire 1 P, nor_out $end
$var wire 1 Q, or_out $end
$var wire 1 R, sub_xor_out $end
$var wire 1 -+ subtract $end
$var wire 1 S, xor_out $end
$var wire 1 T, carry_out $end
$var wire 1 U, adder_out $end
$scope module adder0 $end
$var wire 1 ?, A $end
$var wire 1 V, AandB $end
$var wire 1 W, AxorB $end
$var wire 1 X, AxorBandC $end
$var wire 1 R, B $end
$var wire 1 :, carryin $end
$var wire 1 T, carryout $end
$var wire 1 U, sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[6] $end
$scope module bitslice $end
$var wire 1 Y, A $end
$var wire 1 Z, B $end
$var wire 1 [, and_out $end
$var wire 1 \, c_out $end
$var wire 1 T, carry_in $end
$var wire 1 ], mux0_not $end
$var wire 1 ^, mux1_not $end
$var wire 1 _, mux2_not $end
$var wire 3 `, mux_in [2:0] $end
$var wire 1 a, mux_in0 $end
$var wire 1 b, mux_in1 $end
$var wire 1 c, mux_in2 $end
$var wire 1 d, mux_in3 $end
$var wire 1 e, mux_in4 $end
$var wire 1 f, mux_in5 $end
$var wire 1 g, mux_in6 $end
$var wire 1 h, mux_in7 $end
$var wire 1 i, nand_out $end
$var wire 1 j, nor_out $end
$var wire 1 k, or_out $end
$var wire 1 l, sub_xor_out $end
$var wire 1 -+ subtract $end
$var wire 1 m, xor_out $end
$var wire 1 n, carry_out $end
$var wire 1 o, adder_out $end
$scope module adder0 $end
$var wire 1 Y, A $end
$var wire 1 p, AandB $end
$var wire 1 q, AxorB $end
$var wire 1 r, AxorBandC $end
$var wire 1 l, B $end
$var wire 1 T, carryin $end
$var wire 1 n, carryout $end
$var wire 1 o, sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[7] $end
$scope module bitslice $end
$var wire 1 s, A $end
$var wire 1 t, B $end
$var wire 1 u, and_out $end
$var wire 1 v, c_out $end
$var wire 1 n, carry_in $end
$var wire 1 w, mux0_not $end
$var wire 1 x, mux1_not $end
$var wire 1 y, mux2_not $end
$var wire 3 z, mux_in [2:0] $end
$var wire 1 {, mux_in0 $end
$var wire 1 |, mux_in1 $end
$var wire 1 }, mux_in2 $end
$var wire 1 ~, mux_in3 $end
$var wire 1 !- mux_in4 $end
$var wire 1 "- mux_in5 $end
$var wire 1 #- mux_in6 $end
$var wire 1 $- mux_in7 $end
$var wire 1 %- nand_out $end
$var wire 1 &- nor_out $end
$var wire 1 '- or_out $end
$var wire 1 (- sub_xor_out $end
$var wire 1 -+ subtract $end
$var wire 1 )- xor_out $end
$var wire 1 *- carry_out $end
$var wire 1 +- adder_out $end
$scope module adder0 $end
$var wire 1 s, A $end
$var wire 1 ,- AandB $end
$var wire 1 -- AxorB $end
$var wire 1 .- AxorBandC $end
$var wire 1 (- B $end
$var wire 1 n, carryin $end
$var wire 1 *- carryout $end
$var wire 1 +- sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[8] $end
$scope module bitslice $end
$var wire 1 /- A $end
$var wire 1 0- B $end
$var wire 1 1- and_out $end
$var wire 1 2- c_out $end
$var wire 1 *- carry_in $end
$var wire 1 3- mux0_not $end
$var wire 1 4- mux1_not $end
$var wire 1 5- mux2_not $end
$var wire 3 6- mux_in [2:0] $end
$var wire 1 7- mux_in0 $end
$var wire 1 8- mux_in1 $end
$var wire 1 9- mux_in2 $end
$var wire 1 :- mux_in3 $end
$var wire 1 ;- mux_in4 $end
$var wire 1 <- mux_in5 $end
$var wire 1 =- mux_in6 $end
$var wire 1 >- mux_in7 $end
$var wire 1 ?- nand_out $end
$var wire 1 @- nor_out $end
$var wire 1 A- or_out $end
$var wire 1 B- sub_xor_out $end
$var wire 1 -+ subtract $end
$var wire 1 C- xor_out $end
$var wire 1 D- carry_out $end
$var wire 1 E- adder_out $end
$scope module adder0 $end
$var wire 1 /- A $end
$var wire 1 F- AandB $end
$var wire 1 G- AxorB $end
$var wire 1 H- AxorBandC $end
$var wire 1 B- B $end
$var wire 1 *- carryin $end
$var wire 1 D- carryout $end
$var wire 1 E- sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[9] $end
$scope module bitslice $end
$var wire 1 I- A $end
$var wire 1 J- B $end
$var wire 1 K- and_out $end
$var wire 1 L- c_out $end
$var wire 1 D- carry_in $end
$var wire 1 M- mux0_not $end
$var wire 1 N- mux1_not $end
$var wire 1 O- mux2_not $end
$var wire 3 P- mux_in [2:0] $end
$var wire 1 Q- mux_in0 $end
$var wire 1 R- mux_in1 $end
$var wire 1 S- mux_in2 $end
$var wire 1 T- mux_in3 $end
$var wire 1 U- mux_in4 $end
$var wire 1 V- mux_in5 $end
$var wire 1 W- mux_in6 $end
$var wire 1 X- mux_in7 $end
$var wire 1 Y- nand_out $end
$var wire 1 Z- nor_out $end
$var wire 1 [- or_out $end
$var wire 1 \- sub_xor_out $end
$var wire 1 -+ subtract $end
$var wire 1 ]- xor_out $end
$var wire 1 ^- carry_out $end
$var wire 1 _- adder_out $end
$scope module adder0 $end
$var wire 1 I- A $end
$var wire 1 `- AandB $end
$var wire 1 a- AxorB $end
$var wire 1 b- AxorBandC $end
$var wire 1 \- B $end
$var wire 1 D- carryin $end
$var wire 1 ^- carryout $end
$var wire 1 _- sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[10] $end
$scope module bitslice $end
$var wire 1 c- A $end
$var wire 1 d- B $end
$var wire 1 e- and_out $end
$var wire 1 f- c_out $end
$var wire 1 ^- carry_in $end
$var wire 1 g- mux0_not $end
$var wire 1 h- mux1_not $end
$var wire 1 i- mux2_not $end
$var wire 3 j- mux_in [2:0] $end
$var wire 1 k- mux_in0 $end
$var wire 1 l- mux_in1 $end
$var wire 1 m- mux_in2 $end
$var wire 1 n- mux_in3 $end
$var wire 1 o- mux_in4 $end
$var wire 1 p- mux_in5 $end
$var wire 1 q- mux_in6 $end
$var wire 1 r- mux_in7 $end
$var wire 1 s- nand_out $end
$var wire 1 t- nor_out $end
$var wire 1 u- or_out $end
$var wire 1 v- sub_xor_out $end
$var wire 1 -+ subtract $end
$var wire 1 w- xor_out $end
$var wire 1 x- carry_out $end
$var wire 1 y- adder_out $end
$scope module adder0 $end
$var wire 1 c- A $end
$var wire 1 z- AandB $end
$var wire 1 {- AxorB $end
$var wire 1 |- AxorBandC $end
$var wire 1 v- B $end
$var wire 1 ^- carryin $end
$var wire 1 x- carryout $end
$var wire 1 y- sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[11] $end
$scope module bitslice $end
$var wire 1 }- A $end
$var wire 1 ~- B $end
$var wire 1 !. and_out $end
$var wire 1 ". c_out $end
$var wire 1 x- carry_in $end
$var wire 1 #. mux0_not $end
$var wire 1 $. mux1_not $end
$var wire 1 %. mux2_not $end
$var wire 3 &. mux_in [2:0] $end
$var wire 1 '. mux_in0 $end
$var wire 1 (. mux_in1 $end
$var wire 1 ). mux_in2 $end
$var wire 1 *. mux_in3 $end
$var wire 1 +. mux_in4 $end
$var wire 1 ,. mux_in5 $end
$var wire 1 -. mux_in6 $end
$var wire 1 .. mux_in7 $end
$var wire 1 /. nand_out $end
$var wire 1 0. nor_out $end
$var wire 1 1. or_out $end
$var wire 1 2. sub_xor_out $end
$var wire 1 -+ subtract $end
$var wire 1 3. xor_out $end
$var wire 1 4. carry_out $end
$var wire 1 5. adder_out $end
$scope module adder0 $end
$var wire 1 }- A $end
$var wire 1 6. AandB $end
$var wire 1 7. AxorB $end
$var wire 1 8. AxorBandC $end
$var wire 1 2. B $end
$var wire 1 x- carryin $end
$var wire 1 4. carryout $end
$var wire 1 5. sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[12] $end
$scope module bitslice $end
$var wire 1 9. A $end
$var wire 1 :. B $end
$var wire 1 ;. and_out $end
$var wire 1 <. c_out $end
$var wire 1 4. carry_in $end
$var wire 1 =. mux0_not $end
$var wire 1 >. mux1_not $end
$var wire 1 ?. mux2_not $end
$var wire 3 @. mux_in [2:0] $end
$var wire 1 A. mux_in0 $end
$var wire 1 B. mux_in1 $end
$var wire 1 C. mux_in2 $end
$var wire 1 D. mux_in3 $end
$var wire 1 E. mux_in4 $end
$var wire 1 F. mux_in5 $end
$var wire 1 G. mux_in6 $end
$var wire 1 H. mux_in7 $end
$var wire 1 I. nand_out $end
$var wire 1 J. nor_out $end
$var wire 1 K. or_out $end
$var wire 1 L. sub_xor_out $end
$var wire 1 -+ subtract $end
$var wire 1 M. xor_out $end
$var wire 1 N. carry_out $end
$var wire 1 O. adder_out $end
$scope module adder0 $end
$var wire 1 9. A $end
$var wire 1 P. AandB $end
$var wire 1 Q. AxorB $end
$var wire 1 R. AxorBandC $end
$var wire 1 L. B $end
$var wire 1 4. carryin $end
$var wire 1 N. carryout $end
$var wire 1 O. sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[13] $end
$scope module bitslice $end
$var wire 1 S. A $end
$var wire 1 T. B $end
$var wire 1 U. and_out $end
$var wire 1 V. c_out $end
$var wire 1 N. carry_in $end
$var wire 1 W. mux0_not $end
$var wire 1 X. mux1_not $end
$var wire 1 Y. mux2_not $end
$var wire 3 Z. mux_in [2:0] $end
$var wire 1 [. mux_in0 $end
$var wire 1 \. mux_in1 $end
$var wire 1 ]. mux_in2 $end
$var wire 1 ^. mux_in3 $end
$var wire 1 _. mux_in4 $end
$var wire 1 `. mux_in5 $end
$var wire 1 a. mux_in6 $end
$var wire 1 b. mux_in7 $end
$var wire 1 c. nand_out $end
$var wire 1 d. nor_out $end
$var wire 1 e. or_out $end
$var wire 1 f. sub_xor_out $end
$var wire 1 -+ subtract $end
$var wire 1 g. xor_out $end
$var wire 1 h. carry_out $end
$var wire 1 i. adder_out $end
$scope module adder0 $end
$var wire 1 S. A $end
$var wire 1 j. AandB $end
$var wire 1 k. AxorB $end
$var wire 1 l. AxorBandC $end
$var wire 1 f. B $end
$var wire 1 N. carryin $end
$var wire 1 h. carryout $end
$var wire 1 i. sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[14] $end
$scope module bitslice $end
$var wire 1 m. A $end
$var wire 1 n. B $end
$var wire 1 o. and_out $end
$var wire 1 p. c_out $end
$var wire 1 h. carry_in $end
$var wire 1 q. mux0_not $end
$var wire 1 r. mux1_not $end
$var wire 1 s. mux2_not $end
$var wire 3 t. mux_in [2:0] $end
$var wire 1 u. mux_in0 $end
$var wire 1 v. mux_in1 $end
$var wire 1 w. mux_in2 $end
$var wire 1 x. mux_in3 $end
$var wire 1 y. mux_in4 $end
$var wire 1 z. mux_in5 $end
$var wire 1 {. mux_in6 $end
$var wire 1 |. mux_in7 $end
$var wire 1 }. nand_out $end
$var wire 1 ~. nor_out $end
$var wire 1 !/ or_out $end
$var wire 1 "/ sub_xor_out $end
$var wire 1 -+ subtract $end
$var wire 1 #/ xor_out $end
$var wire 1 $/ carry_out $end
$var wire 1 %/ adder_out $end
$scope module adder0 $end
$var wire 1 m. A $end
$var wire 1 &/ AandB $end
$var wire 1 '/ AxorB $end
$var wire 1 (/ AxorBandC $end
$var wire 1 "/ B $end
$var wire 1 h. carryin $end
$var wire 1 $/ carryout $end
$var wire 1 %/ sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[15] $end
$scope module bitslice $end
$var wire 1 )/ A $end
$var wire 1 */ B $end
$var wire 1 +/ and_out $end
$var wire 1 ,/ c_out $end
$var wire 1 $/ carry_in $end
$var wire 1 -/ mux0_not $end
$var wire 1 ./ mux1_not $end
$var wire 1 // mux2_not $end
$var wire 3 0/ mux_in [2:0] $end
$var wire 1 1/ mux_in0 $end
$var wire 1 2/ mux_in1 $end
$var wire 1 3/ mux_in2 $end
$var wire 1 4/ mux_in3 $end
$var wire 1 5/ mux_in4 $end
$var wire 1 6/ mux_in5 $end
$var wire 1 7/ mux_in6 $end
$var wire 1 8/ mux_in7 $end
$var wire 1 9/ nand_out $end
$var wire 1 :/ nor_out $end
$var wire 1 ;/ or_out $end
$var wire 1 </ sub_xor_out $end
$var wire 1 -+ subtract $end
$var wire 1 =/ xor_out $end
$var wire 1 >/ carry_out $end
$var wire 1 ?/ adder_out $end
$scope module adder0 $end
$var wire 1 )/ A $end
$var wire 1 @/ AandB $end
$var wire 1 A/ AxorB $end
$var wire 1 B/ AxorBandC $end
$var wire 1 </ B $end
$var wire 1 $/ carryin $end
$var wire 1 >/ carryout $end
$var wire 1 ?/ sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[16] $end
$scope module bitslice $end
$var wire 1 C/ A $end
$var wire 1 D/ B $end
$var wire 1 E/ and_out $end
$var wire 1 F/ c_out $end
$var wire 1 >/ carry_in $end
$var wire 1 G/ mux0_not $end
$var wire 1 H/ mux1_not $end
$var wire 1 I/ mux2_not $end
$var wire 3 J/ mux_in [2:0] $end
$var wire 1 K/ mux_in0 $end
$var wire 1 L/ mux_in1 $end
$var wire 1 M/ mux_in2 $end
$var wire 1 N/ mux_in3 $end
$var wire 1 O/ mux_in4 $end
$var wire 1 P/ mux_in5 $end
$var wire 1 Q/ mux_in6 $end
$var wire 1 R/ mux_in7 $end
$var wire 1 S/ nand_out $end
$var wire 1 T/ nor_out $end
$var wire 1 U/ or_out $end
$var wire 1 V/ sub_xor_out $end
$var wire 1 -+ subtract $end
$var wire 1 W/ xor_out $end
$var wire 1 X/ carry_out $end
$var wire 1 Y/ adder_out $end
$scope module adder0 $end
$var wire 1 C/ A $end
$var wire 1 Z/ AandB $end
$var wire 1 [/ AxorB $end
$var wire 1 \/ AxorBandC $end
$var wire 1 V/ B $end
$var wire 1 >/ carryin $end
$var wire 1 X/ carryout $end
$var wire 1 Y/ sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[17] $end
$scope module bitslice $end
$var wire 1 ]/ A $end
$var wire 1 ^/ B $end
$var wire 1 _/ and_out $end
$var wire 1 `/ c_out $end
$var wire 1 X/ carry_in $end
$var wire 1 a/ mux0_not $end
$var wire 1 b/ mux1_not $end
$var wire 1 c/ mux2_not $end
$var wire 3 d/ mux_in [2:0] $end
$var wire 1 e/ mux_in0 $end
$var wire 1 f/ mux_in1 $end
$var wire 1 g/ mux_in2 $end
$var wire 1 h/ mux_in3 $end
$var wire 1 i/ mux_in4 $end
$var wire 1 j/ mux_in5 $end
$var wire 1 k/ mux_in6 $end
$var wire 1 l/ mux_in7 $end
$var wire 1 m/ nand_out $end
$var wire 1 n/ nor_out $end
$var wire 1 o/ or_out $end
$var wire 1 p/ sub_xor_out $end
$var wire 1 -+ subtract $end
$var wire 1 q/ xor_out $end
$var wire 1 r/ carry_out $end
$var wire 1 s/ adder_out $end
$scope module adder0 $end
$var wire 1 ]/ A $end
$var wire 1 t/ AandB $end
$var wire 1 u/ AxorB $end
$var wire 1 v/ AxorBandC $end
$var wire 1 p/ B $end
$var wire 1 X/ carryin $end
$var wire 1 r/ carryout $end
$var wire 1 s/ sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[18] $end
$scope module bitslice $end
$var wire 1 w/ A $end
$var wire 1 x/ B $end
$var wire 1 y/ and_out $end
$var wire 1 z/ c_out $end
$var wire 1 r/ carry_in $end
$var wire 1 {/ mux0_not $end
$var wire 1 |/ mux1_not $end
$var wire 1 }/ mux2_not $end
$var wire 3 ~/ mux_in [2:0] $end
$var wire 1 !0 mux_in0 $end
$var wire 1 "0 mux_in1 $end
$var wire 1 #0 mux_in2 $end
$var wire 1 $0 mux_in3 $end
$var wire 1 %0 mux_in4 $end
$var wire 1 &0 mux_in5 $end
$var wire 1 '0 mux_in6 $end
$var wire 1 (0 mux_in7 $end
$var wire 1 )0 nand_out $end
$var wire 1 *0 nor_out $end
$var wire 1 +0 or_out $end
$var wire 1 ,0 sub_xor_out $end
$var wire 1 -+ subtract $end
$var wire 1 -0 xor_out $end
$var wire 1 .0 carry_out $end
$var wire 1 /0 adder_out $end
$scope module adder0 $end
$var wire 1 w/ A $end
$var wire 1 00 AandB $end
$var wire 1 10 AxorB $end
$var wire 1 20 AxorBandC $end
$var wire 1 ,0 B $end
$var wire 1 r/ carryin $end
$var wire 1 .0 carryout $end
$var wire 1 /0 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[19] $end
$scope module bitslice $end
$var wire 1 30 A $end
$var wire 1 40 B $end
$var wire 1 50 and_out $end
$var wire 1 60 c_out $end
$var wire 1 .0 carry_in $end
$var wire 1 70 mux0_not $end
$var wire 1 80 mux1_not $end
$var wire 1 90 mux2_not $end
$var wire 3 :0 mux_in [2:0] $end
$var wire 1 ;0 mux_in0 $end
$var wire 1 <0 mux_in1 $end
$var wire 1 =0 mux_in2 $end
$var wire 1 >0 mux_in3 $end
$var wire 1 ?0 mux_in4 $end
$var wire 1 @0 mux_in5 $end
$var wire 1 A0 mux_in6 $end
$var wire 1 B0 mux_in7 $end
$var wire 1 C0 nand_out $end
$var wire 1 D0 nor_out $end
$var wire 1 E0 or_out $end
$var wire 1 F0 sub_xor_out $end
$var wire 1 -+ subtract $end
$var wire 1 G0 xor_out $end
$var wire 1 H0 carry_out $end
$var wire 1 I0 adder_out $end
$scope module adder0 $end
$var wire 1 30 A $end
$var wire 1 J0 AandB $end
$var wire 1 K0 AxorB $end
$var wire 1 L0 AxorBandC $end
$var wire 1 F0 B $end
$var wire 1 .0 carryin $end
$var wire 1 H0 carryout $end
$var wire 1 I0 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[20] $end
$scope module bitslice $end
$var wire 1 M0 A $end
$var wire 1 N0 B $end
$var wire 1 O0 and_out $end
$var wire 1 P0 c_out $end
$var wire 1 H0 carry_in $end
$var wire 1 Q0 mux0_not $end
$var wire 1 R0 mux1_not $end
$var wire 1 S0 mux2_not $end
$var wire 3 T0 mux_in [2:0] $end
$var wire 1 U0 mux_in0 $end
$var wire 1 V0 mux_in1 $end
$var wire 1 W0 mux_in2 $end
$var wire 1 X0 mux_in3 $end
$var wire 1 Y0 mux_in4 $end
$var wire 1 Z0 mux_in5 $end
$var wire 1 [0 mux_in6 $end
$var wire 1 \0 mux_in7 $end
$var wire 1 ]0 nand_out $end
$var wire 1 ^0 nor_out $end
$var wire 1 _0 or_out $end
$var wire 1 `0 sub_xor_out $end
$var wire 1 -+ subtract $end
$var wire 1 a0 xor_out $end
$var wire 1 b0 carry_out $end
$var wire 1 c0 adder_out $end
$scope module adder0 $end
$var wire 1 M0 A $end
$var wire 1 d0 AandB $end
$var wire 1 e0 AxorB $end
$var wire 1 f0 AxorBandC $end
$var wire 1 `0 B $end
$var wire 1 H0 carryin $end
$var wire 1 b0 carryout $end
$var wire 1 c0 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[21] $end
$scope module bitslice $end
$var wire 1 g0 A $end
$var wire 1 h0 B $end
$var wire 1 i0 and_out $end
$var wire 1 j0 c_out $end
$var wire 1 b0 carry_in $end
$var wire 1 k0 mux0_not $end
$var wire 1 l0 mux1_not $end
$var wire 1 m0 mux2_not $end
$var wire 3 n0 mux_in [2:0] $end
$var wire 1 o0 mux_in0 $end
$var wire 1 p0 mux_in1 $end
$var wire 1 q0 mux_in2 $end
$var wire 1 r0 mux_in3 $end
$var wire 1 s0 mux_in4 $end
$var wire 1 t0 mux_in5 $end
$var wire 1 u0 mux_in6 $end
$var wire 1 v0 mux_in7 $end
$var wire 1 w0 nand_out $end
$var wire 1 x0 nor_out $end
$var wire 1 y0 or_out $end
$var wire 1 z0 sub_xor_out $end
$var wire 1 -+ subtract $end
$var wire 1 {0 xor_out $end
$var wire 1 |0 carry_out $end
$var wire 1 }0 adder_out $end
$scope module adder0 $end
$var wire 1 g0 A $end
$var wire 1 ~0 AandB $end
$var wire 1 !1 AxorB $end
$var wire 1 "1 AxorBandC $end
$var wire 1 z0 B $end
$var wire 1 b0 carryin $end
$var wire 1 |0 carryout $end
$var wire 1 }0 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[22] $end
$scope module bitslice $end
$var wire 1 #1 A $end
$var wire 1 $1 B $end
$var wire 1 %1 and_out $end
$var wire 1 &1 c_out $end
$var wire 1 |0 carry_in $end
$var wire 1 '1 mux0_not $end
$var wire 1 (1 mux1_not $end
$var wire 1 )1 mux2_not $end
$var wire 3 *1 mux_in [2:0] $end
$var wire 1 +1 mux_in0 $end
$var wire 1 ,1 mux_in1 $end
$var wire 1 -1 mux_in2 $end
$var wire 1 .1 mux_in3 $end
$var wire 1 /1 mux_in4 $end
$var wire 1 01 mux_in5 $end
$var wire 1 11 mux_in6 $end
$var wire 1 21 mux_in7 $end
$var wire 1 31 nand_out $end
$var wire 1 41 nor_out $end
$var wire 1 51 or_out $end
$var wire 1 61 sub_xor_out $end
$var wire 1 -+ subtract $end
$var wire 1 71 xor_out $end
$var wire 1 81 carry_out $end
$var wire 1 91 adder_out $end
$scope module adder0 $end
$var wire 1 #1 A $end
$var wire 1 :1 AandB $end
$var wire 1 ;1 AxorB $end
$var wire 1 <1 AxorBandC $end
$var wire 1 61 B $end
$var wire 1 |0 carryin $end
$var wire 1 81 carryout $end
$var wire 1 91 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[23] $end
$scope module bitslice $end
$var wire 1 =1 A $end
$var wire 1 >1 B $end
$var wire 1 ?1 and_out $end
$var wire 1 @1 c_out $end
$var wire 1 81 carry_in $end
$var wire 1 A1 mux0_not $end
$var wire 1 B1 mux1_not $end
$var wire 1 C1 mux2_not $end
$var wire 3 D1 mux_in [2:0] $end
$var wire 1 E1 mux_in0 $end
$var wire 1 F1 mux_in1 $end
$var wire 1 G1 mux_in2 $end
$var wire 1 H1 mux_in3 $end
$var wire 1 I1 mux_in4 $end
$var wire 1 J1 mux_in5 $end
$var wire 1 K1 mux_in6 $end
$var wire 1 L1 mux_in7 $end
$var wire 1 M1 nand_out $end
$var wire 1 N1 nor_out $end
$var wire 1 O1 or_out $end
$var wire 1 P1 sub_xor_out $end
$var wire 1 -+ subtract $end
$var wire 1 Q1 xor_out $end
$var wire 1 R1 carry_out $end
$var wire 1 S1 adder_out $end
$scope module adder0 $end
$var wire 1 =1 A $end
$var wire 1 T1 AandB $end
$var wire 1 U1 AxorB $end
$var wire 1 V1 AxorBandC $end
$var wire 1 P1 B $end
$var wire 1 81 carryin $end
$var wire 1 R1 carryout $end
$var wire 1 S1 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[24] $end
$scope module bitslice $end
$var wire 1 W1 A $end
$var wire 1 X1 B $end
$var wire 1 Y1 and_out $end
$var wire 1 Z1 c_out $end
$var wire 1 R1 carry_in $end
$var wire 1 [1 mux0_not $end
$var wire 1 \1 mux1_not $end
$var wire 1 ]1 mux2_not $end
$var wire 3 ^1 mux_in [2:0] $end
$var wire 1 _1 mux_in0 $end
$var wire 1 `1 mux_in1 $end
$var wire 1 a1 mux_in2 $end
$var wire 1 b1 mux_in3 $end
$var wire 1 c1 mux_in4 $end
$var wire 1 d1 mux_in5 $end
$var wire 1 e1 mux_in6 $end
$var wire 1 f1 mux_in7 $end
$var wire 1 g1 nand_out $end
$var wire 1 h1 nor_out $end
$var wire 1 i1 or_out $end
$var wire 1 j1 sub_xor_out $end
$var wire 1 -+ subtract $end
$var wire 1 k1 xor_out $end
$var wire 1 l1 carry_out $end
$var wire 1 m1 adder_out $end
$scope module adder0 $end
$var wire 1 W1 A $end
$var wire 1 n1 AandB $end
$var wire 1 o1 AxorB $end
$var wire 1 p1 AxorBandC $end
$var wire 1 j1 B $end
$var wire 1 R1 carryin $end
$var wire 1 l1 carryout $end
$var wire 1 m1 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[25] $end
$scope module bitslice $end
$var wire 1 q1 A $end
$var wire 1 r1 B $end
$var wire 1 s1 and_out $end
$var wire 1 t1 c_out $end
$var wire 1 l1 carry_in $end
$var wire 1 u1 mux0_not $end
$var wire 1 v1 mux1_not $end
$var wire 1 w1 mux2_not $end
$var wire 3 x1 mux_in [2:0] $end
$var wire 1 y1 mux_in0 $end
$var wire 1 z1 mux_in1 $end
$var wire 1 {1 mux_in2 $end
$var wire 1 |1 mux_in3 $end
$var wire 1 }1 mux_in4 $end
$var wire 1 ~1 mux_in5 $end
$var wire 1 !2 mux_in6 $end
$var wire 1 "2 mux_in7 $end
$var wire 1 #2 nand_out $end
$var wire 1 $2 nor_out $end
$var wire 1 %2 or_out $end
$var wire 1 &2 sub_xor_out $end
$var wire 1 -+ subtract $end
$var wire 1 '2 xor_out $end
$var wire 1 (2 carry_out $end
$var wire 1 )2 adder_out $end
$scope module adder0 $end
$var wire 1 q1 A $end
$var wire 1 *2 AandB $end
$var wire 1 +2 AxorB $end
$var wire 1 ,2 AxorBandC $end
$var wire 1 &2 B $end
$var wire 1 l1 carryin $end
$var wire 1 (2 carryout $end
$var wire 1 )2 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[26] $end
$scope module bitslice $end
$var wire 1 -2 A $end
$var wire 1 .2 B $end
$var wire 1 /2 and_out $end
$var wire 1 02 c_out $end
$var wire 1 (2 carry_in $end
$var wire 1 12 mux0_not $end
$var wire 1 22 mux1_not $end
$var wire 1 32 mux2_not $end
$var wire 3 42 mux_in [2:0] $end
$var wire 1 52 mux_in0 $end
$var wire 1 62 mux_in1 $end
$var wire 1 72 mux_in2 $end
$var wire 1 82 mux_in3 $end
$var wire 1 92 mux_in4 $end
$var wire 1 :2 mux_in5 $end
$var wire 1 ;2 mux_in6 $end
$var wire 1 <2 mux_in7 $end
$var wire 1 =2 nand_out $end
$var wire 1 >2 nor_out $end
$var wire 1 ?2 or_out $end
$var wire 1 @2 sub_xor_out $end
$var wire 1 -+ subtract $end
$var wire 1 A2 xor_out $end
$var wire 1 B2 carry_out $end
$var wire 1 C2 adder_out $end
$scope module adder0 $end
$var wire 1 -2 A $end
$var wire 1 D2 AandB $end
$var wire 1 E2 AxorB $end
$var wire 1 F2 AxorBandC $end
$var wire 1 @2 B $end
$var wire 1 (2 carryin $end
$var wire 1 B2 carryout $end
$var wire 1 C2 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[27] $end
$scope module bitslice $end
$var wire 1 G2 A $end
$var wire 1 H2 B $end
$var wire 1 I2 and_out $end
$var wire 1 J2 c_out $end
$var wire 1 B2 carry_in $end
$var wire 1 K2 mux0_not $end
$var wire 1 L2 mux1_not $end
$var wire 1 M2 mux2_not $end
$var wire 3 N2 mux_in [2:0] $end
$var wire 1 O2 mux_in0 $end
$var wire 1 P2 mux_in1 $end
$var wire 1 Q2 mux_in2 $end
$var wire 1 R2 mux_in3 $end
$var wire 1 S2 mux_in4 $end
$var wire 1 T2 mux_in5 $end
$var wire 1 U2 mux_in6 $end
$var wire 1 V2 mux_in7 $end
$var wire 1 W2 nand_out $end
$var wire 1 X2 nor_out $end
$var wire 1 Y2 or_out $end
$var wire 1 Z2 sub_xor_out $end
$var wire 1 -+ subtract $end
$var wire 1 [2 xor_out $end
$var wire 1 \2 carry_out $end
$var wire 1 ]2 adder_out $end
$scope module adder0 $end
$var wire 1 G2 A $end
$var wire 1 ^2 AandB $end
$var wire 1 _2 AxorB $end
$var wire 1 `2 AxorBandC $end
$var wire 1 Z2 B $end
$var wire 1 B2 carryin $end
$var wire 1 \2 carryout $end
$var wire 1 ]2 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[28] $end
$scope module bitslice $end
$var wire 1 a2 A $end
$var wire 1 b2 B $end
$var wire 1 c2 and_out $end
$var wire 1 d2 c_out $end
$var wire 1 \2 carry_in $end
$var wire 1 e2 mux0_not $end
$var wire 1 f2 mux1_not $end
$var wire 1 g2 mux2_not $end
$var wire 3 h2 mux_in [2:0] $end
$var wire 1 i2 mux_in0 $end
$var wire 1 j2 mux_in1 $end
$var wire 1 k2 mux_in2 $end
$var wire 1 l2 mux_in3 $end
$var wire 1 m2 mux_in4 $end
$var wire 1 n2 mux_in5 $end
$var wire 1 o2 mux_in6 $end
$var wire 1 p2 mux_in7 $end
$var wire 1 q2 nand_out $end
$var wire 1 r2 nor_out $end
$var wire 1 s2 or_out $end
$var wire 1 t2 sub_xor_out $end
$var wire 1 -+ subtract $end
$var wire 1 u2 xor_out $end
$var wire 1 v2 carry_out $end
$var wire 1 w2 adder_out $end
$scope module adder0 $end
$var wire 1 a2 A $end
$var wire 1 x2 AandB $end
$var wire 1 y2 AxorB $end
$var wire 1 z2 AxorBandC $end
$var wire 1 t2 B $end
$var wire 1 \2 carryin $end
$var wire 1 v2 carryout $end
$var wire 1 w2 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[29] $end
$scope module bitslice $end
$var wire 1 {2 A $end
$var wire 1 |2 B $end
$var wire 1 }2 and_out $end
$var wire 1 ~2 c_out $end
$var wire 1 v2 carry_in $end
$var wire 1 !3 mux0_not $end
$var wire 1 "3 mux1_not $end
$var wire 1 #3 mux2_not $end
$var wire 3 $3 mux_in [2:0] $end
$var wire 1 %3 mux_in0 $end
$var wire 1 &3 mux_in1 $end
$var wire 1 '3 mux_in2 $end
$var wire 1 (3 mux_in3 $end
$var wire 1 )3 mux_in4 $end
$var wire 1 *3 mux_in5 $end
$var wire 1 +3 mux_in6 $end
$var wire 1 ,3 mux_in7 $end
$var wire 1 -3 nand_out $end
$var wire 1 .3 nor_out $end
$var wire 1 /3 or_out $end
$var wire 1 03 sub_xor_out $end
$var wire 1 -+ subtract $end
$var wire 1 13 xor_out $end
$var wire 1 23 carry_out $end
$var wire 1 33 adder_out $end
$scope module adder0 $end
$var wire 1 {2 A $end
$var wire 1 43 AandB $end
$var wire 1 53 AxorB $end
$var wire 1 63 AxorBandC $end
$var wire 1 03 B $end
$var wire 1 v2 carryin $end
$var wire 1 23 carryout $end
$var wire 1 33 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[30] $end
$scope module bitslice $end
$var wire 1 73 A $end
$var wire 1 83 B $end
$var wire 1 93 and_out $end
$var wire 1 :3 c_out $end
$var wire 1 23 carry_in $end
$var wire 1 ;3 mux0_not $end
$var wire 1 <3 mux1_not $end
$var wire 1 =3 mux2_not $end
$var wire 3 >3 mux_in [2:0] $end
$var wire 1 ?3 mux_in0 $end
$var wire 1 @3 mux_in1 $end
$var wire 1 A3 mux_in2 $end
$var wire 1 B3 mux_in3 $end
$var wire 1 C3 mux_in4 $end
$var wire 1 D3 mux_in5 $end
$var wire 1 E3 mux_in6 $end
$var wire 1 F3 mux_in7 $end
$var wire 1 G3 nand_out $end
$var wire 1 H3 nor_out $end
$var wire 1 I3 or_out $end
$var wire 1 J3 sub_xor_out $end
$var wire 1 -+ subtract $end
$var wire 1 K3 xor_out $end
$var wire 1 L3 carry_out $end
$var wire 1 M3 adder_out $end
$scope module adder0 $end
$var wire 1 73 A $end
$var wire 1 N3 AandB $end
$var wire 1 O3 AxorB $end
$var wire 1 P3 AxorBandC $end
$var wire 1 J3 B $end
$var wire 1 23 carryin $end
$var wire 1 L3 carryout $end
$var wire 1 M3 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[31] $end
$scope module bitslice $end
$var wire 1 Q3 A $end
$var wire 1 R3 B $end
$var wire 1 S3 and_out $end
$var wire 1 T3 c_out $end
$var wire 1 L3 carry_in $end
$var wire 1 U3 mux0_not $end
$var wire 1 V3 mux1_not $end
$var wire 1 W3 mux2_not $end
$var wire 3 X3 mux_in [2:0] $end
$var wire 1 Y3 mux_in0 $end
$var wire 1 Z3 mux_in1 $end
$var wire 1 [3 mux_in2 $end
$var wire 1 \3 mux_in3 $end
$var wire 1 ]3 mux_in4 $end
$var wire 1 ^3 mux_in5 $end
$var wire 1 _3 mux_in6 $end
$var wire 1 `3 mux_in7 $end
$var wire 1 a3 nand_out $end
$var wire 1 b3 nor_out $end
$var wire 1 c3 or_out $end
$var wire 1 d3 sub_xor_out $end
$var wire 1 -+ subtract $end
$var wire 1 e3 xor_out $end
$var wire 1 f3 carry_out $end
$var wire 1 g3 adder_out $end
$scope module adder0 $end
$var wire 1 Q3 A $end
$var wire 1 h3 AandB $end
$var wire 1 i3 AxorB $end
$var wire 1 j3 AxorBandC $end
$var wire 1 d3 B $end
$var wire 1 L3 carryin $end
$var wire 1 f3 carryout $end
$var wire 1 g3 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module LUT $end
$var wire 3 k3 ALUcommand [2:0] $end
$var reg 1 3+ alu_code0 $end
$var reg 1 2+ alu_code1 $end
$var reg 1 1+ alu_code2 $end
$var reg 1 /+ set_flags $end
$var reg 1 .+ slt_enable $end
$var reg 1 -+ subtract $end
$upscope $end
$scope module bitslice0 $end
$var wire 1 l3 A $end
$var wire 1 m3 B $end
$var wire 1 n3 and_out $end
$var wire 1 o3 c_out $end
$var wire 1 -+ carry_in $end
$var wire 1 p3 mux0_not $end
$var wire 1 q3 mux1_not $end
$var wire 1 r3 mux2_not $end
$var wire 3 s3 mux_in [2:0] $end
$var wire 1 t3 mux_in0 $end
$var wire 1 u3 mux_in1 $end
$var wire 1 v3 mux_in2 $end
$var wire 1 w3 mux_in3 $end
$var wire 1 x3 mux_in4 $end
$var wire 1 y3 mux_in5 $end
$var wire 1 z3 mux_in6 $end
$var wire 1 {3 mux_in7 $end
$var wire 1 |3 nand_out $end
$var wire 1 }3 nor_out $end
$var wire 1 ~3 or_out $end
$var wire 1 !4 sub_xor_out $end
$var wire 1 -+ subtract $end
$var wire 1 "4 xor_out $end
$var wire 1 8+ carry_out $end
$var wire 1 #4 adder_out $end
$scope module adder0 $end
$var wire 1 l3 A $end
$var wire 1 $4 AandB $end
$var wire 1 %4 AxorB $end
$var wire 1 &4 AxorBandC $end
$var wire 1 !4 B $end
$var wire 1 -+ carryin $end
$var wire 1 8+ carryout $end
$var wire 1 #4 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module pcMux $end
$var wire 32 '4 draco [31:0] $end
$var wire 2 (4 dumbledore [1:0] $end
$var wire 32 )4 neville [31:0] $end
$var wire 32 *4 harry [31:0] $end
$var wire 32 +4 chosenOne [31:0] $end
$upscope $end
$scope module resAlu $end
$var wire 1 ,4 SLT_internal $end
$var wire 1 -4 carryout $end
$var wire 3 .4 command [2:0] $end
$var wire 1 /4 nb $end
$var wire 1 04 nout $end
$var wire 1 14 nslt_enable $end
$var wire 32 24 operandB [31:0] $end
$var wire 1 34 overflow $end
$var wire 1 44 overflow_internal $end
$var wire 1 54 slt_a_and $end
$var wire 1 64 slt_ab_and $end
$var wire 1 74 slt_b_and $end
$var wire 1 84 slt_final $end
$var wire 1 94 slt_nand $end
$var wire 1 & zero $end
$var wire 1 :4 zero_nor $end
$var wire 1 ;4 subtract $end
$var wire 1 <4 slt_enable $end
$var wire 1 =4 set_flags $end
$var wire 32 >4 result [31:0] $end
$var wire 32 ?4 operandA [31:0] $end
$var wire 1 @4 alu_code_internal2 $end
$var wire 1 A4 alu_code_internal1 $end
$var wire 1 B4 alu_code_internal0 $end
$scope begin genblock[1] $end
$scope module bitslice $end
$var wire 1 C4 A $end
$var wire 1 D4 B $end
$var wire 1 E4 and_out $end
$var wire 1 F4 c_out $end
$var wire 1 G4 carry_in $end
$var wire 1 H4 mux0_not $end
$var wire 1 I4 mux1_not $end
$var wire 1 J4 mux2_not $end
$var wire 3 K4 mux_in [2:0] $end
$var wire 1 L4 mux_in0 $end
$var wire 1 M4 mux_in1 $end
$var wire 1 N4 mux_in2 $end
$var wire 1 O4 mux_in3 $end
$var wire 1 P4 mux_in4 $end
$var wire 1 Q4 mux_in5 $end
$var wire 1 R4 mux_in6 $end
$var wire 1 S4 mux_in7 $end
$var wire 1 T4 nand_out $end
$var wire 1 U4 nor_out $end
$var wire 1 V4 or_out $end
$var wire 1 W4 sub_xor_out $end
$var wire 1 ;4 subtract $end
$var wire 1 X4 xor_out $end
$var wire 1 Y4 carry_out $end
$var wire 1 Z4 adder_out $end
$scope module adder0 $end
$var wire 1 C4 A $end
$var wire 1 [4 AandB $end
$var wire 1 \4 AxorB $end
$var wire 1 ]4 AxorBandC $end
$var wire 1 W4 B $end
$var wire 1 G4 carryin $end
$var wire 1 Y4 carryout $end
$var wire 1 Z4 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[2] $end
$scope module bitslice $end
$var wire 1 ^4 A $end
$var wire 1 _4 B $end
$var wire 1 `4 and_out $end
$var wire 1 a4 c_out $end
$var wire 1 Y4 carry_in $end
$var wire 1 b4 mux0_not $end
$var wire 1 c4 mux1_not $end
$var wire 1 d4 mux2_not $end
$var wire 3 e4 mux_in [2:0] $end
$var wire 1 f4 mux_in0 $end
$var wire 1 g4 mux_in1 $end
$var wire 1 h4 mux_in2 $end
$var wire 1 i4 mux_in3 $end
$var wire 1 j4 mux_in4 $end
$var wire 1 k4 mux_in5 $end
$var wire 1 l4 mux_in6 $end
$var wire 1 m4 mux_in7 $end
$var wire 1 n4 nand_out $end
$var wire 1 o4 nor_out $end
$var wire 1 p4 or_out $end
$var wire 1 q4 sub_xor_out $end
$var wire 1 ;4 subtract $end
$var wire 1 r4 xor_out $end
$var wire 1 s4 carry_out $end
$var wire 1 t4 adder_out $end
$scope module adder0 $end
$var wire 1 ^4 A $end
$var wire 1 u4 AandB $end
$var wire 1 v4 AxorB $end
$var wire 1 w4 AxorBandC $end
$var wire 1 q4 B $end
$var wire 1 Y4 carryin $end
$var wire 1 s4 carryout $end
$var wire 1 t4 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[3] $end
$scope module bitslice $end
$var wire 1 x4 A $end
$var wire 1 y4 B $end
$var wire 1 z4 and_out $end
$var wire 1 {4 c_out $end
$var wire 1 s4 carry_in $end
$var wire 1 |4 mux0_not $end
$var wire 1 }4 mux1_not $end
$var wire 1 ~4 mux2_not $end
$var wire 3 !5 mux_in [2:0] $end
$var wire 1 "5 mux_in0 $end
$var wire 1 #5 mux_in1 $end
$var wire 1 $5 mux_in2 $end
$var wire 1 %5 mux_in3 $end
$var wire 1 &5 mux_in4 $end
$var wire 1 '5 mux_in5 $end
$var wire 1 (5 mux_in6 $end
$var wire 1 )5 mux_in7 $end
$var wire 1 *5 nand_out $end
$var wire 1 +5 nor_out $end
$var wire 1 ,5 or_out $end
$var wire 1 -5 sub_xor_out $end
$var wire 1 ;4 subtract $end
$var wire 1 .5 xor_out $end
$var wire 1 /5 carry_out $end
$var wire 1 05 adder_out $end
$scope module adder0 $end
$var wire 1 x4 A $end
$var wire 1 15 AandB $end
$var wire 1 25 AxorB $end
$var wire 1 35 AxorBandC $end
$var wire 1 -5 B $end
$var wire 1 s4 carryin $end
$var wire 1 /5 carryout $end
$var wire 1 05 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[4] $end
$scope module bitslice $end
$var wire 1 45 A $end
$var wire 1 55 B $end
$var wire 1 65 and_out $end
$var wire 1 75 c_out $end
$var wire 1 /5 carry_in $end
$var wire 1 85 mux0_not $end
$var wire 1 95 mux1_not $end
$var wire 1 :5 mux2_not $end
$var wire 3 ;5 mux_in [2:0] $end
$var wire 1 <5 mux_in0 $end
$var wire 1 =5 mux_in1 $end
$var wire 1 >5 mux_in2 $end
$var wire 1 ?5 mux_in3 $end
$var wire 1 @5 mux_in4 $end
$var wire 1 A5 mux_in5 $end
$var wire 1 B5 mux_in6 $end
$var wire 1 C5 mux_in7 $end
$var wire 1 D5 nand_out $end
$var wire 1 E5 nor_out $end
$var wire 1 F5 or_out $end
$var wire 1 G5 sub_xor_out $end
$var wire 1 ;4 subtract $end
$var wire 1 H5 xor_out $end
$var wire 1 I5 carry_out $end
$var wire 1 J5 adder_out $end
$scope module adder0 $end
$var wire 1 45 A $end
$var wire 1 K5 AandB $end
$var wire 1 L5 AxorB $end
$var wire 1 M5 AxorBandC $end
$var wire 1 G5 B $end
$var wire 1 /5 carryin $end
$var wire 1 I5 carryout $end
$var wire 1 J5 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[5] $end
$scope module bitslice $end
$var wire 1 N5 A $end
$var wire 1 O5 B $end
$var wire 1 P5 and_out $end
$var wire 1 Q5 c_out $end
$var wire 1 I5 carry_in $end
$var wire 1 R5 mux0_not $end
$var wire 1 S5 mux1_not $end
$var wire 1 T5 mux2_not $end
$var wire 3 U5 mux_in [2:0] $end
$var wire 1 V5 mux_in0 $end
$var wire 1 W5 mux_in1 $end
$var wire 1 X5 mux_in2 $end
$var wire 1 Y5 mux_in3 $end
$var wire 1 Z5 mux_in4 $end
$var wire 1 [5 mux_in5 $end
$var wire 1 \5 mux_in6 $end
$var wire 1 ]5 mux_in7 $end
$var wire 1 ^5 nand_out $end
$var wire 1 _5 nor_out $end
$var wire 1 `5 or_out $end
$var wire 1 a5 sub_xor_out $end
$var wire 1 ;4 subtract $end
$var wire 1 b5 xor_out $end
$var wire 1 c5 carry_out $end
$var wire 1 d5 adder_out $end
$scope module adder0 $end
$var wire 1 N5 A $end
$var wire 1 e5 AandB $end
$var wire 1 f5 AxorB $end
$var wire 1 g5 AxorBandC $end
$var wire 1 a5 B $end
$var wire 1 I5 carryin $end
$var wire 1 c5 carryout $end
$var wire 1 d5 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[6] $end
$scope module bitslice $end
$var wire 1 h5 A $end
$var wire 1 i5 B $end
$var wire 1 j5 and_out $end
$var wire 1 k5 c_out $end
$var wire 1 c5 carry_in $end
$var wire 1 l5 mux0_not $end
$var wire 1 m5 mux1_not $end
$var wire 1 n5 mux2_not $end
$var wire 3 o5 mux_in [2:0] $end
$var wire 1 p5 mux_in0 $end
$var wire 1 q5 mux_in1 $end
$var wire 1 r5 mux_in2 $end
$var wire 1 s5 mux_in3 $end
$var wire 1 t5 mux_in4 $end
$var wire 1 u5 mux_in5 $end
$var wire 1 v5 mux_in6 $end
$var wire 1 w5 mux_in7 $end
$var wire 1 x5 nand_out $end
$var wire 1 y5 nor_out $end
$var wire 1 z5 or_out $end
$var wire 1 {5 sub_xor_out $end
$var wire 1 ;4 subtract $end
$var wire 1 |5 xor_out $end
$var wire 1 }5 carry_out $end
$var wire 1 ~5 adder_out $end
$scope module adder0 $end
$var wire 1 h5 A $end
$var wire 1 !6 AandB $end
$var wire 1 "6 AxorB $end
$var wire 1 #6 AxorBandC $end
$var wire 1 {5 B $end
$var wire 1 c5 carryin $end
$var wire 1 }5 carryout $end
$var wire 1 ~5 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[7] $end
$scope module bitslice $end
$var wire 1 $6 A $end
$var wire 1 %6 B $end
$var wire 1 &6 and_out $end
$var wire 1 '6 c_out $end
$var wire 1 }5 carry_in $end
$var wire 1 (6 mux0_not $end
$var wire 1 )6 mux1_not $end
$var wire 1 *6 mux2_not $end
$var wire 3 +6 mux_in [2:0] $end
$var wire 1 ,6 mux_in0 $end
$var wire 1 -6 mux_in1 $end
$var wire 1 .6 mux_in2 $end
$var wire 1 /6 mux_in3 $end
$var wire 1 06 mux_in4 $end
$var wire 1 16 mux_in5 $end
$var wire 1 26 mux_in6 $end
$var wire 1 36 mux_in7 $end
$var wire 1 46 nand_out $end
$var wire 1 56 nor_out $end
$var wire 1 66 or_out $end
$var wire 1 76 sub_xor_out $end
$var wire 1 ;4 subtract $end
$var wire 1 86 xor_out $end
$var wire 1 96 carry_out $end
$var wire 1 :6 adder_out $end
$scope module adder0 $end
$var wire 1 $6 A $end
$var wire 1 ;6 AandB $end
$var wire 1 <6 AxorB $end
$var wire 1 =6 AxorBandC $end
$var wire 1 76 B $end
$var wire 1 }5 carryin $end
$var wire 1 96 carryout $end
$var wire 1 :6 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[8] $end
$scope module bitslice $end
$var wire 1 >6 A $end
$var wire 1 ?6 B $end
$var wire 1 @6 and_out $end
$var wire 1 A6 c_out $end
$var wire 1 96 carry_in $end
$var wire 1 B6 mux0_not $end
$var wire 1 C6 mux1_not $end
$var wire 1 D6 mux2_not $end
$var wire 3 E6 mux_in [2:0] $end
$var wire 1 F6 mux_in0 $end
$var wire 1 G6 mux_in1 $end
$var wire 1 H6 mux_in2 $end
$var wire 1 I6 mux_in3 $end
$var wire 1 J6 mux_in4 $end
$var wire 1 K6 mux_in5 $end
$var wire 1 L6 mux_in6 $end
$var wire 1 M6 mux_in7 $end
$var wire 1 N6 nand_out $end
$var wire 1 O6 nor_out $end
$var wire 1 P6 or_out $end
$var wire 1 Q6 sub_xor_out $end
$var wire 1 ;4 subtract $end
$var wire 1 R6 xor_out $end
$var wire 1 S6 carry_out $end
$var wire 1 T6 adder_out $end
$scope module adder0 $end
$var wire 1 >6 A $end
$var wire 1 U6 AandB $end
$var wire 1 V6 AxorB $end
$var wire 1 W6 AxorBandC $end
$var wire 1 Q6 B $end
$var wire 1 96 carryin $end
$var wire 1 S6 carryout $end
$var wire 1 T6 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[9] $end
$scope module bitslice $end
$var wire 1 X6 A $end
$var wire 1 Y6 B $end
$var wire 1 Z6 and_out $end
$var wire 1 [6 c_out $end
$var wire 1 S6 carry_in $end
$var wire 1 \6 mux0_not $end
$var wire 1 ]6 mux1_not $end
$var wire 1 ^6 mux2_not $end
$var wire 3 _6 mux_in [2:0] $end
$var wire 1 `6 mux_in0 $end
$var wire 1 a6 mux_in1 $end
$var wire 1 b6 mux_in2 $end
$var wire 1 c6 mux_in3 $end
$var wire 1 d6 mux_in4 $end
$var wire 1 e6 mux_in5 $end
$var wire 1 f6 mux_in6 $end
$var wire 1 g6 mux_in7 $end
$var wire 1 h6 nand_out $end
$var wire 1 i6 nor_out $end
$var wire 1 j6 or_out $end
$var wire 1 k6 sub_xor_out $end
$var wire 1 ;4 subtract $end
$var wire 1 l6 xor_out $end
$var wire 1 m6 carry_out $end
$var wire 1 n6 adder_out $end
$scope module adder0 $end
$var wire 1 X6 A $end
$var wire 1 o6 AandB $end
$var wire 1 p6 AxorB $end
$var wire 1 q6 AxorBandC $end
$var wire 1 k6 B $end
$var wire 1 S6 carryin $end
$var wire 1 m6 carryout $end
$var wire 1 n6 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[10] $end
$scope module bitslice $end
$var wire 1 r6 A $end
$var wire 1 s6 B $end
$var wire 1 t6 and_out $end
$var wire 1 u6 c_out $end
$var wire 1 m6 carry_in $end
$var wire 1 v6 mux0_not $end
$var wire 1 w6 mux1_not $end
$var wire 1 x6 mux2_not $end
$var wire 3 y6 mux_in [2:0] $end
$var wire 1 z6 mux_in0 $end
$var wire 1 {6 mux_in1 $end
$var wire 1 |6 mux_in2 $end
$var wire 1 }6 mux_in3 $end
$var wire 1 ~6 mux_in4 $end
$var wire 1 !7 mux_in5 $end
$var wire 1 "7 mux_in6 $end
$var wire 1 #7 mux_in7 $end
$var wire 1 $7 nand_out $end
$var wire 1 %7 nor_out $end
$var wire 1 &7 or_out $end
$var wire 1 '7 sub_xor_out $end
$var wire 1 ;4 subtract $end
$var wire 1 (7 xor_out $end
$var wire 1 )7 carry_out $end
$var wire 1 *7 adder_out $end
$scope module adder0 $end
$var wire 1 r6 A $end
$var wire 1 +7 AandB $end
$var wire 1 ,7 AxorB $end
$var wire 1 -7 AxorBandC $end
$var wire 1 '7 B $end
$var wire 1 m6 carryin $end
$var wire 1 )7 carryout $end
$var wire 1 *7 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[11] $end
$scope module bitslice $end
$var wire 1 .7 A $end
$var wire 1 /7 B $end
$var wire 1 07 and_out $end
$var wire 1 17 c_out $end
$var wire 1 )7 carry_in $end
$var wire 1 27 mux0_not $end
$var wire 1 37 mux1_not $end
$var wire 1 47 mux2_not $end
$var wire 3 57 mux_in [2:0] $end
$var wire 1 67 mux_in0 $end
$var wire 1 77 mux_in1 $end
$var wire 1 87 mux_in2 $end
$var wire 1 97 mux_in3 $end
$var wire 1 :7 mux_in4 $end
$var wire 1 ;7 mux_in5 $end
$var wire 1 <7 mux_in6 $end
$var wire 1 =7 mux_in7 $end
$var wire 1 >7 nand_out $end
$var wire 1 ?7 nor_out $end
$var wire 1 @7 or_out $end
$var wire 1 A7 sub_xor_out $end
$var wire 1 ;4 subtract $end
$var wire 1 B7 xor_out $end
$var wire 1 C7 carry_out $end
$var wire 1 D7 adder_out $end
$scope module adder0 $end
$var wire 1 .7 A $end
$var wire 1 E7 AandB $end
$var wire 1 F7 AxorB $end
$var wire 1 G7 AxorBandC $end
$var wire 1 A7 B $end
$var wire 1 )7 carryin $end
$var wire 1 C7 carryout $end
$var wire 1 D7 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[12] $end
$scope module bitslice $end
$var wire 1 H7 A $end
$var wire 1 I7 B $end
$var wire 1 J7 and_out $end
$var wire 1 K7 c_out $end
$var wire 1 C7 carry_in $end
$var wire 1 L7 mux0_not $end
$var wire 1 M7 mux1_not $end
$var wire 1 N7 mux2_not $end
$var wire 3 O7 mux_in [2:0] $end
$var wire 1 P7 mux_in0 $end
$var wire 1 Q7 mux_in1 $end
$var wire 1 R7 mux_in2 $end
$var wire 1 S7 mux_in3 $end
$var wire 1 T7 mux_in4 $end
$var wire 1 U7 mux_in5 $end
$var wire 1 V7 mux_in6 $end
$var wire 1 W7 mux_in7 $end
$var wire 1 X7 nand_out $end
$var wire 1 Y7 nor_out $end
$var wire 1 Z7 or_out $end
$var wire 1 [7 sub_xor_out $end
$var wire 1 ;4 subtract $end
$var wire 1 \7 xor_out $end
$var wire 1 ]7 carry_out $end
$var wire 1 ^7 adder_out $end
$scope module adder0 $end
$var wire 1 H7 A $end
$var wire 1 _7 AandB $end
$var wire 1 `7 AxorB $end
$var wire 1 a7 AxorBandC $end
$var wire 1 [7 B $end
$var wire 1 C7 carryin $end
$var wire 1 ]7 carryout $end
$var wire 1 ^7 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[13] $end
$scope module bitslice $end
$var wire 1 b7 A $end
$var wire 1 c7 B $end
$var wire 1 d7 and_out $end
$var wire 1 e7 c_out $end
$var wire 1 ]7 carry_in $end
$var wire 1 f7 mux0_not $end
$var wire 1 g7 mux1_not $end
$var wire 1 h7 mux2_not $end
$var wire 3 i7 mux_in [2:0] $end
$var wire 1 j7 mux_in0 $end
$var wire 1 k7 mux_in1 $end
$var wire 1 l7 mux_in2 $end
$var wire 1 m7 mux_in3 $end
$var wire 1 n7 mux_in4 $end
$var wire 1 o7 mux_in5 $end
$var wire 1 p7 mux_in6 $end
$var wire 1 q7 mux_in7 $end
$var wire 1 r7 nand_out $end
$var wire 1 s7 nor_out $end
$var wire 1 t7 or_out $end
$var wire 1 u7 sub_xor_out $end
$var wire 1 ;4 subtract $end
$var wire 1 v7 xor_out $end
$var wire 1 w7 carry_out $end
$var wire 1 x7 adder_out $end
$scope module adder0 $end
$var wire 1 b7 A $end
$var wire 1 y7 AandB $end
$var wire 1 z7 AxorB $end
$var wire 1 {7 AxorBandC $end
$var wire 1 u7 B $end
$var wire 1 ]7 carryin $end
$var wire 1 w7 carryout $end
$var wire 1 x7 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[14] $end
$scope module bitslice $end
$var wire 1 |7 A $end
$var wire 1 }7 B $end
$var wire 1 ~7 and_out $end
$var wire 1 !8 c_out $end
$var wire 1 w7 carry_in $end
$var wire 1 "8 mux0_not $end
$var wire 1 #8 mux1_not $end
$var wire 1 $8 mux2_not $end
$var wire 3 %8 mux_in [2:0] $end
$var wire 1 &8 mux_in0 $end
$var wire 1 '8 mux_in1 $end
$var wire 1 (8 mux_in2 $end
$var wire 1 )8 mux_in3 $end
$var wire 1 *8 mux_in4 $end
$var wire 1 +8 mux_in5 $end
$var wire 1 ,8 mux_in6 $end
$var wire 1 -8 mux_in7 $end
$var wire 1 .8 nand_out $end
$var wire 1 /8 nor_out $end
$var wire 1 08 or_out $end
$var wire 1 18 sub_xor_out $end
$var wire 1 ;4 subtract $end
$var wire 1 28 xor_out $end
$var wire 1 38 carry_out $end
$var wire 1 48 adder_out $end
$scope module adder0 $end
$var wire 1 |7 A $end
$var wire 1 58 AandB $end
$var wire 1 68 AxorB $end
$var wire 1 78 AxorBandC $end
$var wire 1 18 B $end
$var wire 1 w7 carryin $end
$var wire 1 38 carryout $end
$var wire 1 48 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[15] $end
$scope module bitslice $end
$var wire 1 88 A $end
$var wire 1 98 B $end
$var wire 1 :8 and_out $end
$var wire 1 ;8 c_out $end
$var wire 1 38 carry_in $end
$var wire 1 <8 mux0_not $end
$var wire 1 =8 mux1_not $end
$var wire 1 >8 mux2_not $end
$var wire 3 ?8 mux_in [2:0] $end
$var wire 1 @8 mux_in0 $end
$var wire 1 A8 mux_in1 $end
$var wire 1 B8 mux_in2 $end
$var wire 1 C8 mux_in3 $end
$var wire 1 D8 mux_in4 $end
$var wire 1 E8 mux_in5 $end
$var wire 1 F8 mux_in6 $end
$var wire 1 G8 mux_in7 $end
$var wire 1 H8 nand_out $end
$var wire 1 I8 nor_out $end
$var wire 1 J8 or_out $end
$var wire 1 K8 sub_xor_out $end
$var wire 1 ;4 subtract $end
$var wire 1 L8 xor_out $end
$var wire 1 M8 carry_out $end
$var wire 1 N8 adder_out $end
$scope module adder0 $end
$var wire 1 88 A $end
$var wire 1 O8 AandB $end
$var wire 1 P8 AxorB $end
$var wire 1 Q8 AxorBandC $end
$var wire 1 K8 B $end
$var wire 1 38 carryin $end
$var wire 1 M8 carryout $end
$var wire 1 N8 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[16] $end
$scope module bitslice $end
$var wire 1 R8 A $end
$var wire 1 S8 B $end
$var wire 1 T8 and_out $end
$var wire 1 U8 c_out $end
$var wire 1 M8 carry_in $end
$var wire 1 V8 mux0_not $end
$var wire 1 W8 mux1_not $end
$var wire 1 X8 mux2_not $end
$var wire 3 Y8 mux_in [2:0] $end
$var wire 1 Z8 mux_in0 $end
$var wire 1 [8 mux_in1 $end
$var wire 1 \8 mux_in2 $end
$var wire 1 ]8 mux_in3 $end
$var wire 1 ^8 mux_in4 $end
$var wire 1 _8 mux_in5 $end
$var wire 1 `8 mux_in6 $end
$var wire 1 a8 mux_in7 $end
$var wire 1 b8 nand_out $end
$var wire 1 c8 nor_out $end
$var wire 1 d8 or_out $end
$var wire 1 e8 sub_xor_out $end
$var wire 1 ;4 subtract $end
$var wire 1 f8 xor_out $end
$var wire 1 g8 carry_out $end
$var wire 1 h8 adder_out $end
$scope module adder0 $end
$var wire 1 R8 A $end
$var wire 1 i8 AandB $end
$var wire 1 j8 AxorB $end
$var wire 1 k8 AxorBandC $end
$var wire 1 e8 B $end
$var wire 1 M8 carryin $end
$var wire 1 g8 carryout $end
$var wire 1 h8 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[17] $end
$scope module bitslice $end
$var wire 1 l8 A $end
$var wire 1 m8 B $end
$var wire 1 n8 and_out $end
$var wire 1 o8 c_out $end
$var wire 1 g8 carry_in $end
$var wire 1 p8 mux0_not $end
$var wire 1 q8 mux1_not $end
$var wire 1 r8 mux2_not $end
$var wire 3 s8 mux_in [2:0] $end
$var wire 1 t8 mux_in0 $end
$var wire 1 u8 mux_in1 $end
$var wire 1 v8 mux_in2 $end
$var wire 1 w8 mux_in3 $end
$var wire 1 x8 mux_in4 $end
$var wire 1 y8 mux_in5 $end
$var wire 1 z8 mux_in6 $end
$var wire 1 {8 mux_in7 $end
$var wire 1 |8 nand_out $end
$var wire 1 }8 nor_out $end
$var wire 1 ~8 or_out $end
$var wire 1 !9 sub_xor_out $end
$var wire 1 ;4 subtract $end
$var wire 1 "9 xor_out $end
$var wire 1 #9 carry_out $end
$var wire 1 $9 adder_out $end
$scope module adder0 $end
$var wire 1 l8 A $end
$var wire 1 %9 AandB $end
$var wire 1 &9 AxorB $end
$var wire 1 '9 AxorBandC $end
$var wire 1 !9 B $end
$var wire 1 g8 carryin $end
$var wire 1 #9 carryout $end
$var wire 1 $9 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[18] $end
$scope module bitslice $end
$var wire 1 (9 A $end
$var wire 1 )9 B $end
$var wire 1 *9 and_out $end
$var wire 1 +9 c_out $end
$var wire 1 #9 carry_in $end
$var wire 1 ,9 mux0_not $end
$var wire 1 -9 mux1_not $end
$var wire 1 .9 mux2_not $end
$var wire 3 /9 mux_in [2:0] $end
$var wire 1 09 mux_in0 $end
$var wire 1 19 mux_in1 $end
$var wire 1 29 mux_in2 $end
$var wire 1 39 mux_in3 $end
$var wire 1 49 mux_in4 $end
$var wire 1 59 mux_in5 $end
$var wire 1 69 mux_in6 $end
$var wire 1 79 mux_in7 $end
$var wire 1 89 nand_out $end
$var wire 1 99 nor_out $end
$var wire 1 :9 or_out $end
$var wire 1 ;9 sub_xor_out $end
$var wire 1 ;4 subtract $end
$var wire 1 <9 xor_out $end
$var wire 1 =9 carry_out $end
$var wire 1 >9 adder_out $end
$scope module adder0 $end
$var wire 1 (9 A $end
$var wire 1 ?9 AandB $end
$var wire 1 @9 AxorB $end
$var wire 1 A9 AxorBandC $end
$var wire 1 ;9 B $end
$var wire 1 #9 carryin $end
$var wire 1 =9 carryout $end
$var wire 1 >9 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[19] $end
$scope module bitslice $end
$var wire 1 B9 A $end
$var wire 1 C9 B $end
$var wire 1 D9 and_out $end
$var wire 1 E9 c_out $end
$var wire 1 =9 carry_in $end
$var wire 1 F9 mux0_not $end
$var wire 1 G9 mux1_not $end
$var wire 1 H9 mux2_not $end
$var wire 3 I9 mux_in [2:0] $end
$var wire 1 J9 mux_in0 $end
$var wire 1 K9 mux_in1 $end
$var wire 1 L9 mux_in2 $end
$var wire 1 M9 mux_in3 $end
$var wire 1 N9 mux_in4 $end
$var wire 1 O9 mux_in5 $end
$var wire 1 P9 mux_in6 $end
$var wire 1 Q9 mux_in7 $end
$var wire 1 R9 nand_out $end
$var wire 1 S9 nor_out $end
$var wire 1 T9 or_out $end
$var wire 1 U9 sub_xor_out $end
$var wire 1 ;4 subtract $end
$var wire 1 V9 xor_out $end
$var wire 1 W9 carry_out $end
$var wire 1 X9 adder_out $end
$scope module adder0 $end
$var wire 1 B9 A $end
$var wire 1 Y9 AandB $end
$var wire 1 Z9 AxorB $end
$var wire 1 [9 AxorBandC $end
$var wire 1 U9 B $end
$var wire 1 =9 carryin $end
$var wire 1 W9 carryout $end
$var wire 1 X9 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[20] $end
$scope module bitslice $end
$var wire 1 \9 A $end
$var wire 1 ]9 B $end
$var wire 1 ^9 and_out $end
$var wire 1 _9 c_out $end
$var wire 1 W9 carry_in $end
$var wire 1 `9 mux0_not $end
$var wire 1 a9 mux1_not $end
$var wire 1 b9 mux2_not $end
$var wire 3 c9 mux_in [2:0] $end
$var wire 1 d9 mux_in0 $end
$var wire 1 e9 mux_in1 $end
$var wire 1 f9 mux_in2 $end
$var wire 1 g9 mux_in3 $end
$var wire 1 h9 mux_in4 $end
$var wire 1 i9 mux_in5 $end
$var wire 1 j9 mux_in6 $end
$var wire 1 k9 mux_in7 $end
$var wire 1 l9 nand_out $end
$var wire 1 m9 nor_out $end
$var wire 1 n9 or_out $end
$var wire 1 o9 sub_xor_out $end
$var wire 1 ;4 subtract $end
$var wire 1 p9 xor_out $end
$var wire 1 q9 carry_out $end
$var wire 1 r9 adder_out $end
$scope module adder0 $end
$var wire 1 \9 A $end
$var wire 1 s9 AandB $end
$var wire 1 t9 AxorB $end
$var wire 1 u9 AxorBandC $end
$var wire 1 o9 B $end
$var wire 1 W9 carryin $end
$var wire 1 q9 carryout $end
$var wire 1 r9 sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[21] $end
$scope module bitslice $end
$var wire 1 v9 A $end
$var wire 1 w9 B $end
$var wire 1 x9 and_out $end
$var wire 1 y9 c_out $end
$var wire 1 q9 carry_in $end
$var wire 1 z9 mux0_not $end
$var wire 1 {9 mux1_not $end
$var wire 1 |9 mux2_not $end
$var wire 3 }9 mux_in [2:0] $end
$var wire 1 ~9 mux_in0 $end
$var wire 1 !: mux_in1 $end
$var wire 1 ": mux_in2 $end
$var wire 1 #: mux_in3 $end
$var wire 1 $: mux_in4 $end
$var wire 1 %: mux_in5 $end
$var wire 1 &: mux_in6 $end
$var wire 1 ': mux_in7 $end
$var wire 1 (: nand_out $end
$var wire 1 ): nor_out $end
$var wire 1 *: or_out $end
$var wire 1 +: sub_xor_out $end
$var wire 1 ;4 subtract $end
$var wire 1 ,: xor_out $end
$var wire 1 -: carry_out $end
$var wire 1 .: adder_out $end
$scope module adder0 $end
$var wire 1 v9 A $end
$var wire 1 /: AandB $end
$var wire 1 0: AxorB $end
$var wire 1 1: AxorBandC $end
$var wire 1 +: B $end
$var wire 1 q9 carryin $end
$var wire 1 -: carryout $end
$var wire 1 .: sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[22] $end
$scope module bitslice $end
$var wire 1 2: A $end
$var wire 1 3: B $end
$var wire 1 4: and_out $end
$var wire 1 5: c_out $end
$var wire 1 -: carry_in $end
$var wire 1 6: mux0_not $end
$var wire 1 7: mux1_not $end
$var wire 1 8: mux2_not $end
$var wire 3 9: mux_in [2:0] $end
$var wire 1 :: mux_in0 $end
$var wire 1 ;: mux_in1 $end
$var wire 1 <: mux_in2 $end
$var wire 1 =: mux_in3 $end
$var wire 1 >: mux_in4 $end
$var wire 1 ?: mux_in5 $end
$var wire 1 @: mux_in6 $end
$var wire 1 A: mux_in7 $end
$var wire 1 B: nand_out $end
$var wire 1 C: nor_out $end
$var wire 1 D: or_out $end
$var wire 1 E: sub_xor_out $end
$var wire 1 ;4 subtract $end
$var wire 1 F: xor_out $end
$var wire 1 G: carry_out $end
$var wire 1 H: adder_out $end
$scope module adder0 $end
$var wire 1 2: A $end
$var wire 1 I: AandB $end
$var wire 1 J: AxorB $end
$var wire 1 K: AxorBandC $end
$var wire 1 E: B $end
$var wire 1 -: carryin $end
$var wire 1 G: carryout $end
$var wire 1 H: sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[23] $end
$scope module bitslice $end
$var wire 1 L: A $end
$var wire 1 M: B $end
$var wire 1 N: and_out $end
$var wire 1 O: c_out $end
$var wire 1 G: carry_in $end
$var wire 1 P: mux0_not $end
$var wire 1 Q: mux1_not $end
$var wire 1 R: mux2_not $end
$var wire 3 S: mux_in [2:0] $end
$var wire 1 T: mux_in0 $end
$var wire 1 U: mux_in1 $end
$var wire 1 V: mux_in2 $end
$var wire 1 W: mux_in3 $end
$var wire 1 X: mux_in4 $end
$var wire 1 Y: mux_in5 $end
$var wire 1 Z: mux_in6 $end
$var wire 1 [: mux_in7 $end
$var wire 1 \: nand_out $end
$var wire 1 ]: nor_out $end
$var wire 1 ^: or_out $end
$var wire 1 _: sub_xor_out $end
$var wire 1 ;4 subtract $end
$var wire 1 `: xor_out $end
$var wire 1 a: carry_out $end
$var wire 1 b: adder_out $end
$scope module adder0 $end
$var wire 1 L: A $end
$var wire 1 c: AandB $end
$var wire 1 d: AxorB $end
$var wire 1 e: AxorBandC $end
$var wire 1 _: B $end
$var wire 1 G: carryin $end
$var wire 1 a: carryout $end
$var wire 1 b: sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[24] $end
$scope module bitslice $end
$var wire 1 f: A $end
$var wire 1 g: B $end
$var wire 1 h: and_out $end
$var wire 1 i: c_out $end
$var wire 1 a: carry_in $end
$var wire 1 j: mux0_not $end
$var wire 1 k: mux1_not $end
$var wire 1 l: mux2_not $end
$var wire 3 m: mux_in [2:0] $end
$var wire 1 n: mux_in0 $end
$var wire 1 o: mux_in1 $end
$var wire 1 p: mux_in2 $end
$var wire 1 q: mux_in3 $end
$var wire 1 r: mux_in4 $end
$var wire 1 s: mux_in5 $end
$var wire 1 t: mux_in6 $end
$var wire 1 u: mux_in7 $end
$var wire 1 v: nand_out $end
$var wire 1 w: nor_out $end
$var wire 1 x: or_out $end
$var wire 1 y: sub_xor_out $end
$var wire 1 ;4 subtract $end
$var wire 1 z: xor_out $end
$var wire 1 {: carry_out $end
$var wire 1 |: adder_out $end
$scope module adder0 $end
$var wire 1 f: A $end
$var wire 1 }: AandB $end
$var wire 1 ~: AxorB $end
$var wire 1 !; AxorBandC $end
$var wire 1 y: B $end
$var wire 1 a: carryin $end
$var wire 1 {: carryout $end
$var wire 1 |: sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[25] $end
$scope module bitslice $end
$var wire 1 "; A $end
$var wire 1 #; B $end
$var wire 1 $; and_out $end
$var wire 1 %; c_out $end
$var wire 1 {: carry_in $end
$var wire 1 &; mux0_not $end
$var wire 1 '; mux1_not $end
$var wire 1 (; mux2_not $end
$var wire 3 ); mux_in [2:0] $end
$var wire 1 *; mux_in0 $end
$var wire 1 +; mux_in1 $end
$var wire 1 ,; mux_in2 $end
$var wire 1 -; mux_in3 $end
$var wire 1 .; mux_in4 $end
$var wire 1 /; mux_in5 $end
$var wire 1 0; mux_in6 $end
$var wire 1 1; mux_in7 $end
$var wire 1 2; nand_out $end
$var wire 1 3; nor_out $end
$var wire 1 4; or_out $end
$var wire 1 5; sub_xor_out $end
$var wire 1 ;4 subtract $end
$var wire 1 6; xor_out $end
$var wire 1 7; carry_out $end
$var wire 1 8; adder_out $end
$scope module adder0 $end
$var wire 1 "; A $end
$var wire 1 9; AandB $end
$var wire 1 :; AxorB $end
$var wire 1 ;; AxorBandC $end
$var wire 1 5; B $end
$var wire 1 {: carryin $end
$var wire 1 7; carryout $end
$var wire 1 8; sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[26] $end
$scope module bitslice $end
$var wire 1 <; A $end
$var wire 1 =; B $end
$var wire 1 >; and_out $end
$var wire 1 ?; c_out $end
$var wire 1 7; carry_in $end
$var wire 1 @; mux0_not $end
$var wire 1 A; mux1_not $end
$var wire 1 B; mux2_not $end
$var wire 3 C; mux_in [2:0] $end
$var wire 1 D; mux_in0 $end
$var wire 1 E; mux_in1 $end
$var wire 1 F; mux_in2 $end
$var wire 1 G; mux_in3 $end
$var wire 1 H; mux_in4 $end
$var wire 1 I; mux_in5 $end
$var wire 1 J; mux_in6 $end
$var wire 1 K; mux_in7 $end
$var wire 1 L; nand_out $end
$var wire 1 M; nor_out $end
$var wire 1 N; or_out $end
$var wire 1 O; sub_xor_out $end
$var wire 1 ;4 subtract $end
$var wire 1 P; xor_out $end
$var wire 1 Q; carry_out $end
$var wire 1 R; adder_out $end
$scope module adder0 $end
$var wire 1 <; A $end
$var wire 1 S; AandB $end
$var wire 1 T; AxorB $end
$var wire 1 U; AxorBandC $end
$var wire 1 O; B $end
$var wire 1 7; carryin $end
$var wire 1 Q; carryout $end
$var wire 1 R; sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[27] $end
$scope module bitslice $end
$var wire 1 V; A $end
$var wire 1 W; B $end
$var wire 1 X; and_out $end
$var wire 1 Y; c_out $end
$var wire 1 Q; carry_in $end
$var wire 1 Z; mux0_not $end
$var wire 1 [; mux1_not $end
$var wire 1 \; mux2_not $end
$var wire 3 ]; mux_in [2:0] $end
$var wire 1 ^; mux_in0 $end
$var wire 1 _; mux_in1 $end
$var wire 1 `; mux_in2 $end
$var wire 1 a; mux_in3 $end
$var wire 1 b; mux_in4 $end
$var wire 1 c; mux_in5 $end
$var wire 1 d; mux_in6 $end
$var wire 1 e; mux_in7 $end
$var wire 1 f; nand_out $end
$var wire 1 g; nor_out $end
$var wire 1 h; or_out $end
$var wire 1 i; sub_xor_out $end
$var wire 1 ;4 subtract $end
$var wire 1 j; xor_out $end
$var wire 1 k; carry_out $end
$var wire 1 l; adder_out $end
$scope module adder0 $end
$var wire 1 V; A $end
$var wire 1 m; AandB $end
$var wire 1 n; AxorB $end
$var wire 1 o; AxorBandC $end
$var wire 1 i; B $end
$var wire 1 Q; carryin $end
$var wire 1 k; carryout $end
$var wire 1 l; sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[28] $end
$scope module bitslice $end
$var wire 1 p; A $end
$var wire 1 q; B $end
$var wire 1 r; and_out $end
$var wire 1 s; c_out $end
$var wire 1 k; carry_in $end
$var wire 1 t; mux0_not $end
$var wire 1 u; mux1_not $end
$var wire 1 v; mux2_not $end
$var wire 3 w; mux_in [2:0] $end
$var wire 1 x; mux_in0 $end
$var wire 1 y; mux_in1 $end
$var wire 1 z; mux_in2 $end
$var wire 1 {; mux_in3 $end
$var wire 1 |; mux_in4 $end
$var wire 1 }; mux_in5 $end
$var wire 1 ~; mux_in6 $end
$var wire 1 !< mux_in7 $end
$var wire 1 "< nand_out $end
$var wire 1 #< nor_out $end
$var wire 1 $< or_out $end
$var wire 1 %< sub_xor_out $end
$var wire 1 ;4 subtract $end
$var wire 1 &< xor_out $end
$var wire 1 '< carry_out $end
$var wire 1 (< adder_out $end
$scope module adder0 $end
$var wire 1 p; A $end
$var wire 1 )< AandB $end
$var wire 1 *< AxorB $end
$var wire 1 +< AxorBandC $end
$var wire 1 %< B $end
$var wire 1 k; carryin $end
$var wire 1 '< carryout $end
$var wire 1 (< sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[29] $end
$scope module bitslice $end
$var wire 1 ,< A $end
$var wire 1 -< B $end
$var wire 1 .< and_out $end
$var wire 1 /< c_out $end
$var wire 1 '< carry_in $end
$var wire 1 0< mux0_not $end
$var wire 1 1< mux1_not $end
$var wire 1 2< mux2_not $end
$var wire 3 3< mux_in [2:0] $end
$var wire 1 4< mux_in0 $end
$var wire 1 5< mux_in1 $end
$var wire 1 6< mux_in2 $end
$var wire 1 7< mux_in3 $end
$var wire 1 8< mux_in4 $end
$var wire 1 9< mux_in5 $end
$var wire 1 :< mux_in6 $end
$var wire 1 ;< mux_in7 $end
$var wire 1 << nand_out $end
$var wire 1 =< nor_out $end
$var wire 1 >< or_out $end
$var wire 1 ?< sub_xor_out $end
$var wire 1 ;4 subtract $end
$var wire 1 @< xor_out $end
$var wire 1 A< carry_out $end
$var wire 1 B< adder_out $end
$scope module adder0 $end
$var wire 1 ,< A $end
$var wire 1 C< AandB $end
$var wire 1 D< AxorB $end
$var wire 1 E< AxorBandC $end
$var wire 1 ?< B $end
$var wire 1 '< carryin $end
$var wire 1 A< carryout $end
$var wire 1 B< sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[30] $end
$scope module bitslice $end
$var wire 1 F< A $end
$var wire 1 G< B $end
$var wire 1 H< and_out $end
$var wire 1 I< c_out $end
$var wire 1 A< carry_in $end
$var wire 1 J< mux0_not $end
$var wire 1 K< mux1_not $end
$var wire 1 L< mux2_not $end
$var wire 3 M< mux_in [2:0] $end
$var wire 1 N< mux_in0 $end
$var wire 1 O< mux_in1 $end
$var wire 1 P< mux_in2 $end
$var wire 1 Q< mux_in3 $end
$var wire 1 R< mux_in4 $end
$var wire 1 S< mux_in5 $end
$var wire 1 T< mux_in6 $end
$var wire 1 U< mux_in7 $end
$var wire 1 V< nand_out $end
$var wire 1 W< nor_out $end
$var wire 1 X< or_out $end
$var wire 1 Y< sub_xor_out $end
$var wire 1 ;4 subtract $end
$var wire 1 Z< xor_out $end
$var wire 1 [< carry_out $end
$var wire 1 \< adder_out $end
$scope module adder0 $end
$var wire 1 F< A $end
$var wire 1 ]< AandB $end
$var wire 1 ^< AxorB $end
$var wire 1 _< AxorBandC $end
$var wire 1 Y< B $end
$var wire 1 A< carryin $end
$var wire 1 [< carryout $end
$var wire 1 \< sum $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblock[31] $end
$scope module bitslice $end
$var wire 1 `< A $end
$var wire 1 a< B $end
$var wire 1 b< and_out $end
$var wire 1 c< c_out $end
$var wire 1 [< carry_in $end
$var wire 1 d< mux0_not $end
$var wire 1 e< mux1_not $end
$var wire 1 f< mux2_not $end
$var wire 3 g< mux_in [2:0] $end
$var wire 1 h< mux_in0 $end
$var wire 1 i< mux_in1 $end
$var wire 1 j< mux_in2 $end
$var wire 1 k< mux_in3 $end
$var wire 1 l< mux_in4 $end
$var wire 1 m< mux_in5 $end
$var wire 1 n< mux_in6 $end
$var wire 1 o< mux_in7 $end
$var wire 1 p< nand_out $end
$var wire 1 q< nor_out $end
$var wire 1 r< or_out $end
$var wire 1 s< sub_xor_out $end
$var wire 1 ;4 subtract $end
$var wire 1 t< xor_out $end
$var wire 1 u< carry_out $end
$var wire 1 v< adder_out $end
$scope module adder0 $end
$var wire 1 `< A $end
$var wire 1 w< AandB $end
$var wire 1 x< AxorB $end
$var wire 1 y< AxorBandC $end
$var wire 1 s< B $end
$var wire 1 [< carryin $end
$var wire 1 u< carryout $end
$var wire 1 v< sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module LUT $end
$var wire 3 z< ALUcommand [2:0] $end
$var reg 1 B4 alu_code0 $end
$var reg 1 A4 alu_code1 $end
$var reg 1 @4 alu_code2 $end
$var reg 1 =4 set_flags $end
$var reg 1 <4 slt_enable $end
$var reg 1 ;4 subtract $end
$upscope $end
$scope module bitslice0 $end
$var wire 1 {< A $end
$var wire 1 |< B $end
$var wire 1 }< and_out $end
$var wire 1 ~< c_out $end
$var wire 1 ;4 carry_in $end
$var wire 1 != mux0_not $end
$var wire 1 "= mux1_not $end
$var wire 1 #= mux2_not $end
$var wire 3 $= mux_in [2:0] $end
$var wire 1 %= mux_in0 $end
$var wire 1 &= mux_in1 $end
$var wire 1 '= mux_in2 $end
$var wire 1 (= mux_in3 $end
$var wire 1 )= mux_in4 $end
$var wire 1 *= mux_in5 $end
$var wire 1 += mux_in6 $end
$var wire 1 ,= mux_in7 $end
$var wire 1 -= nand_out $end
$var wire 1 .= nor_out $end
$var wire 1 /= or_out $end
$var wire 1 0= sub_xor_out $end
$var wire 1 ;4 subtract $end
$var wire 1 1= xor_out $end
$var wire 1 G4 carry_out $end
$var wire 1 2= adder_out $end
$scope module adder0 $end
$var wire 1 {< A $end
$var wire 1 3= AandB $end
$var wire 1 4= AxorB $end
$var wire 1 5= AxorBandC $end
$var wire 1 0= B $end
$var wire 1 ;4 carryin $end
$var wire 1 G4 carryout $end
$var wire 1 2= sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module rf $end
$var wire 1 $ Clk $end
$var wire 5 6= ReadRegister1 [4:0] $end
$var wire 5 7= ReadRegister2 [4:0] $end
$var wire 1 ) RegWrite $end
$var wire 32 8= WriteData [31:0] $end
$var wire 5 9= WriteRegister [4:0] $end
$var wire 32 := writeEnable [31:0] $end
$var wire 32 ;= input9 [31:0] $end
$var wire 32 <= input8 [31:0] $end
$var wire 32 == input7 [31:0] $end
$var wire 32 >= input6 [31:0] $end
$var wire 32 ?= input5 [31:0] $end
$var wire 32 @= input4 [31:0] $end
$var wire 32 A= input31 [31:0] $end
$var wire 32 B= input30 [31:0] $end
$var wire 32 C= input3 [31:0] $end
$var wire 32 D= input29 [31:0] $end
$var wire 32 E= input28 [31:0] $end
$var wire 32 F= input27 [31:0] $end
$var wire 32 G= input26 [31:0] $end
$var wire 32 H= input25 [31:0] $end
$var wire 32 I= input24 [31:0] $end
$var wire 32 J= input23 [31:0] $end
$var wire 32 K= input22 [31:0] $end
$var wire 32 L= input21 [31:0] $end
$var wire 32 M= input20 [31:0] $end
$var wire 32 N= input2 [31:0] $end
$var wire 32 O= input19 [31:0] $end
$var wire 32 P= input18 [31:0] $end
$var wire 32 Q= input17 [31:0] $end
$var wire 32 R= input16 [31:0] $end
$var wire 32 S= input15 [31:0] $end
$var wire 32 T= input14 [31:0] $end
$var wire 32 U= input13 [31:0] $end
$var wire 32 V= input12 [31:0] $end
$var wire 32 W= input11 [31:0] $end
$var wire 32 X= input10 [31:0] $end
$var wire 32 Y= input1 [31:0] $end
$var wire 32 Z= input0 [31:0] $end
$var wire 32 [= ReadData2 [31:0] $end
$var wire 32 \= ReadData1 [31:0] $end
$scope module dec0 $end
$var wire 5 ]= address [4:0] $end
$var wire 1 ) enable $end
$var wire 32 ^= out [31:0] $end
$upscope $end
$scope module read1 $end
$var wire 5 _= address [4:0] $end
$var wire 32 `= out [31:0] $end
$var wire 32 a= input9 [31:0] $end
$var wire 32 b= input8 [31:0] $end
$var wire 32 c= input7 [31:0] $end
$var wire 32 d= input6 [31:0] $end
$var wire 32 e= input5 [31:0] $end
$var wire 32 f= input4 [31:0] $end
$var wire 32 g= input31 [31:0] $end
$var wire 32 h= input30 [31:0] $end
$var wire 32 i= input3 [31:0] $end
$var wire 32 j= input29 [31:0] $end
$var wire 32 k= input28 [31:0] $end
$var wire 32 l= input27 [31:0] $end
$var wire 32 m= input26 [31:0] $end
$var wire 32 n= input25 [31:0] $end
$var wire 32 o= input24 [31:0] $end
$var wire 32 p= input23 [31:0] $end
$var wire 32 q= input22 [31:0] $end
$var wire 32 r= input21 [31:0] $end
$var wire 32 s= input20 [31:0] $end
$var wire 32 t= input2 [31:0] $end
$var wire 32 u= input19 [31:0] $end
$var wire 32 v= input18 [31:0] $end
$var wire 32 w= input17 [31:0] $end
$var wire 32 x= input16 [31:0] $end
$var wire 32 y= input15 [31:0] $end
$var wire 32 z= input14 [31:0] $end
$var wire 32 {= input13 [31:0] $end
$var wire 32 |= input12 [31:0] $end
$var wire 32 }= input11 [31:0] $end
$var wire 32 ~= input10 [31:0] $end
$var wire 32 !> input1 [31:0] $end
$var wire 32 "> input0 [31:0] $end
$upscope $end
$scope module read2 $end
$var wire 5 #> address [4:0] $end
$var wire 32 $> out [31:0] $end
$var wire 32 %> input9 [31:0] $end
$var wire 32 &> input8 [31:0] $end
$var wire 32 '> input7 [31:0] $end
$var wire 32 (> input6 [31:0] $end
$var wire 32 )> input5 [31:0] $end
$var wire 32 *> input4 [31:0] $end
$var wire 32 +> input31 [31:0] $end
$var wire 32 ,> input30 [31:0] $end
$var wire 32 -> input3 [31:0] $end
$var wire 32 .> input29 [31:0] $end
$var wire 32 /> input28 [31:0] $end
$var wire 32 0> input27 [31:0] $end
$var wire 32 1> input26 [31:0] $end
$var wire 32 2> input25 [31:0] $end
$var wire 32 3> input24 [31:0] $end
$var wire 32 4> input23 [31:0] $end
$var wire 32 5> input22 [31:0] $end
$var wire 32 6> input21 [31:0] $end
$var wire 32 7> input20 [31:0] $end
$var wire 32 8> input2 [31:0] $end
$var wire 32 9> input19 [31:0] $end
$var wire 32 :> input18 [31:0] $end
$var wire 32 ;> input17 [31:0] $end
$var wire 32 <> input16 [31:0] $end
$var wire 32 => input15 [31:0] $end
$var wire 32 >> input14 [31:0] $end
$var wire 32 ?> input13 [31:0] $end
$var wire 32 @> input12 [31:0] $end
$var wire 32 A> input11 [31:0] $end
$var wire 32 B> input10 [31:0] $end
$var wire 32 C> input1 [31:0] $end
$var wire 32 D> input0 [31:0] $end
$upscope $end
$scope module reg0 $end
$var wire 1 $ clk $end
$var wire 32 E> din [31:0] $end
$var wire 1 F> wrenable $end
$var reg 32 G> qout [31:0] $end
$upscope $end
$scope module reg1 $end
$var wire 1 $ clk $end
$var wire 32 H> din [31:0] $end
$var wire 1 I> wrenable $end
$var reg 32 J> qout [31:0] $end
$upscope $end
$scope module reg10 $end
$var wire 1 $ clk $end
$var wire 32 K> din [31:0] $end
$var wire 1 L> wrenable $end
$var reg 32 M> qout [31:0] $end
$upscope $end
$scope module reg11 $end
$var wire 1 $ clk $end
$var wire 32 N> din [31:0] $end
$var wire 1 O> wrenable $end
$var reg 32 P> qout [31:0] $end
$upscope $end
$scope module reg12 $end
$var wire 1 $ clk $end
$var wire 32 Q> din [31:0] $end
$var wire 1 R> wrenable $end
$var reg 32 S> qout [31:0] $end
$upscope $end
$scope module reg13 $end
$var wire 1 $ clk $end
$var wire 32 T> din [31:0] $end
$var wire 1 U> wrenable $end
$var reg 32 V> qout [31:0] $end
$upscope $end
$scope module reg14 $end
$var wire 1 $ clk $end
$var wire 32 W> din [31:0] $end
$var wire 1 X> wrenable $end
$var reg 32 Y> qout [31:0] $end
$upscope $end
$scope module reg15 $end
$var wire 1 $ clk $end
$var wire 32 Z> din [31:0] $end
$var wire 1 [> wrenable $end
$var reg 32 \> qout [31:0] $end
$upscope $end
$scope module reg16 $end
$var wire 1 $ clk $end
$var wire 32 ]> din [31:0] $end
$var wire 1 ^> wrenable $end
$var reg 32 _> qout [31:0] $end
$upscope $end
$scope module reg17 $end
$var wire 1 $ clk $end
$var wire 32 `> din [31:0] $end
$var wire 1 a> wrenable $end
$var reg 32 b> qout [31:0] $end
$upscope $end
$scope module reg18 $end
$var wire 1 $ clk $end
$var wire 32 c> din [31:0] $end
$var wire 1 d> wrenable $end
$var reg 32 e> qout [31:0] $end
$upscope $end
$scope module reg19 $end
$var wire 1 $ clk $end
$var wire 32 f> din [31:0] $end
$var wire 1 g> wrenable $end
$var reg 32 h> qout [31:0] $end
$upscope $end
$scope module reg2 $end
$var wire 1 $ clk $end
$var wire 32 i> din [31:0] $end
$var wire 1 j> wrenable $end
$var reg 32 k> qout [31:0] $end
$upscope $end
$scope module reg20 $end
$var wire 1 $ clk $end
$var wire 32 l> din [31:0] $end
$var wire 1 m> wrenable $end
$var reg 32 n> qout [31:0] $end
$upscope $end
$scope module reg21 $end
$var wire 1 $ clk $end
$var wire 32 o> din [31:0] $end
$var wire 1 p> wrenable $end
$var reg 32 q> qout [31:0] $end
$upscope $end
$scope module reg22 $end
$var wire 1 $ clk $end
$var wire 32 r> din [31:0] $end
$var wire 1 s> wrenable $end
$var reg 32 t> qout [31:0] $end
$upscope $end
$scope module reg23 $end
$var wire 1 $ clk $end
$var wire 32 u> din [31:0] $end
$var wire 1 v> wrenable $end
$var reg 32 w> qout [31:0] $end
$upscope $end
$scope module reg24 $end
$var wire 1 $ clk $end
$var wire 32 x> din [31:0] $end
$var wire 1 y> wrenable $end
$var reg 32 z> qout [31:0] $end
$upscope $end
$scope module reg25 $end
$var wire 1 $ clk $end
$var wire 32 {> din [31:0] $end
$var wire 1 |> wrenable $end
$var reg 32 }> qout [31:0] $end
$upscope $end
$scope module reg26 $end
$var wire 1 $ clk $end
$var wire 32 ~> din [31:0] $end
$var wire 1 !? wrenable $end
$var reg 32 "? qout [31:0] $end
$upscope $end
$scope module reg27 $end
$var wire 1 $ clk $end
$var wire 32 #? din [31:0] $end
$var wire 1 $? wrenable $end
$var reg 32 %? qout [31:0] $end
$upscope $end
$scope module reg28 $end
$var wire 1 $ clk $end
$var wire 32 &? din [31:0] $end
$var wire 1 '? wrenable $end
$var reg 32 (? qout [31:0] $end
$upscope $end
$scope module reg29 $end
$var wire 1 $ clk $end
$var wire 32 )? din [31:0] $end
$var wire 1 *? wrenable $end
$var reg 32 +? qout [31:0] $end
$upscope $end
$scope module reg3 $end
$var wire 1 $ clk $end
$var wire 32 ,? din [31:0] $end
$var wire 1 -? wrenable $end
$var reg 32 .? qout [31:0] $end
$upscope $end
$scope module reg30 $end
$var wire 1 $ clk $end
$var wire 32 /? din [31:0] $end
$var wire 1 0? wrenable $end
$var reg 32 1? qout [31:0] $end
$upscope $end
$scope module reg31 $end
$var wire 1 $ clk $end
$var wire 32 2? din [31:0] $end
$var wire 1 3? wrenable $end
$var reg 32 4? qout [31:0] $end
$upscope $end
$scope module reg4 $end
$var wire 1 $ clk $end
$var wire 32 5? din [31:0] $end
$var wire 1 6? wrenable $end
$var reg 32 7? qout [31:0] $end
$upscope $end
$scope module reg5 $end
$var wire 1 $ clk $end
$var wire 32 8? din [31:0] $end
$var wire 1 9? wrenable $end
$var reg 32 :? qout [31:0] $end
$upscope $end
$scope module reg6 $end
$var wire 1 $ clk $end
$var wire 32 ;? din [31:0] $end
$var wire 1 <? wrenable $end
$var reg 32 =? qout [31:0] $end
$upscope $end
$scope module reg7 $end
$var wire 1 $ clk $end
$var wire 32 >? din [31:0] $end
$var wire 1 ?? wrenable $end
$var reg 32 @? qout [31:0] $end
$upscope $end
$scope module reg8 $end
$var wire 1 $ clk $end
$var wire 32 A? din [31:0] $end
$var wire 1 B? wrenable $end
$var reg 32 C? qout [31:0] $end
$upscope $end
$scope module reg9 $end
$var wire 1 $ clk $end
$var wire 32 D? din [31:0] $end
$var wire 1 E? wrenable $end
$var reg 32 F? qout [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module tester $end
$var wire 1 # begintest $end
$var wire 1 $ clk $end
$var wire 32 G? hanoi [31:0] $end
$var reg 1 " dutpassed $end
$var reg 1 ! endtest $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b100001110 G?
bx F?
xE?
bx D?
bx C?
xB?
bx A?
bx @?
x??
bx >?
bx =?
x<?
bx ;?
bx :?
x9?
bx 8?
bx 7?
x6?
bx 5?
bx 4?
x3?
bx 2?
bx 1?
x0?
bx /?
bx .?
x-?
bx ,?
bx +?
x*?
bx )?
bx (?
x'?
bx &?
bx %?
x$?
bx #?
bx "?
x!?
bx ~>
bx }>
x|>
bx {>
bx z>
xy>
bx x>
bx w>
xv>
bx u>
bx t>
xs>
bx r>
bx q>
xp>
bx o>
bx n>
xm>
bx l>
bx k>
xj>
bx i>
bx h>
xg>
bx f>
bx e>
xd>
bx c>
bx b>
xa>
bx `>
bx _>
x^>
bx ]>
bx \>
x[>
bx Z>
bx Y>
xX>
bx W>
bx V>
xU>
bx T>
bx S>
xR>
bx Q>
bx P>
xO>
bx N>
bx M>
xL>
bx K>
bx J>
xI>
bx H>
bx G>
xF>
bx E>
bx D>
bx C>
bx B>
bx A>
bx @>
bx ?>
bx >>
bx =>
bx <>
bx ;>
bx :>
bx 9>
bx 8>
bx 7>
bx 6>
bx 5>
bx 4>
bx 3>
bx 2>
bx 1>
bx 0>
bx />
bx .>
bx ->
bx ,>
bx +>
bx *>
bx )>
bx (>
bx '>
bx &>
bx %>
bx $>
bx #>
bx ">
bx !>
bx ~=
bx }=
bx |=
bx {=
bx z=
bx y=
bx x=
bx w=
bx v=
bx u=
bx t=
bx s=
bx r=
bx q=
bx p=
bx o=
bx n=
bx m=
bx l=
bx k=
bx j=
bx i=
bx h=
bx g=
bx f=
bx e=
bx d=
bx c=
bx b=
bx a=
bx `=
bx _=
bx ^=
bx ]=
bx \=
bx [=
bx Z=
bx Y=
bx X=
bx W=
bx V=
bx U=
bx T=
bx S=
bx R=
bx Q=
bx P=
bx O=
bx N=
bx M=
bx L=
bx K=
bx J=
bx I=
bx H=
bx G=
bx F=
bx E=
bx D=
bx C=
bx B=
bx A=
bx @=
bx ?=
bx >=
bx ==
bx <=
bx ;=
bx :=
bx 9=
bx 8=
bx 7=
bx 6=
x5=
x4=
x3=
x2=
x1=
x0=
x/=
x.=
x-=
x,=
x+=
x*=
x)=
x(=
x'=
x&=
x%=
bx $=
x#=
x"=
x!=
x~<
x}<
x|<
x{<
b0xx z<
xy<
xx<
xw<
xv<
xu<
xt<
xs<
xr<
xq<
xp<
xo<
xn<
xm<
xl<
xk<
xj<
xi<
xh<
bx g<
xf<
xe<
xd<
xc<
xb<
xa<
x`<
x_<
x^<
x]<
x\<
x[<
xZ<
xY<
xX<
xW<
xV<
xU<
xT<
xS<
xR<
xQ<
xP<
xO<
xN<
bx M<
xL<
xK<
xJ<
xI<
xH<
xG<
xF<
xE<
xD<
xC<
xB<
xA<
x@<
x?<
x><
x=<
x<<
x;<
x:<
x9<
x8<
x7<
x6<
x5<
x4<
bx 3<
x2<
x1<
x0<
x/<
x.<
x-<
x,<
x+<
x*<
x)<
x(<
x'<
x&<
x%<
x$<
x#<
x"<
x!<
x~;
x};
x|;
x{;
xz;
xy;
xx;
bx w;
xv;
xu;
xt;
xs;
xr;
xq;
xp;
xo;
xn;
xm;
xl;
xk;
xj;
xi;
xh;
xg;
xf;
xe;
xd;
xc;
xb;
xa;
x`;
x_;
x^;
bx ];
x\;
x[;
xZ;
xY;
xX;
xW;
xV;
xU;
xT;
xS;
xR;
xQ;
xP;
xO;
xN;
xM;
xL;
xK;
xJ;
xI;
xH;
xG;
xF;
xE;
xD;
bx C;
xB;
xA;
x@;
x?;
x>;
x=;
x<;
x;;
x:;
x9;
x8;
x7;
x6;
x5;
x4;
x3;
x2;
x1;
x0;
x/;
x.;
x-;
x,;
x+;
x*;
bx );
x(;
x';
x&;
x%;
x$;
x#;
x";
x!;
x~:
x}:
x|:
x{:
xz:
xy:
xx:
xw:
xv:
xu:
xt:
xs:
xr:
xq:
xp:
xo:
xn:
bx m:
xl:
xk:
xj:
xi:
xh:
xg:
xf:
xe:
xd:
xc:
xb:
xa:
x`:
x_:
x^:
x]:
x\:
x[:
xZ:
xY:
xX:
xW:
xV:
xU:
xT:
bx S:
xR:
xQ:
xP:
xO:
xN:
xM:
xL:
xK:
xJ:
xI:
xH:
xG:
xF:
xE:
xD:
xC:
xB:
xA:
x@:
x?:
x>:
x=:
x<:
x;:
x::
bx 9:
x8:
x7:
x6:
x5:
x4:
x3:
x2:
x1:
x0:
x/:
x.:
x-:
x,:
x+:
x*:
x):
x(:
x':
x&:
x%:
x$:
x#:
x":
x!:
x~9
bx }9
x|9
x{9
xz9
xy9
xx9
xw9
xv9
xu9
xt9
xs9
xr9
xq9
xp9
xo9
xn9
xm9
xl9
xk9
xj9
xi9
xh9
xg9
xf9
xe9
xd9
bx c9
xb9
xa9
x`9
x_9
x^9
x]9
x\9
x[9
xZ9
xY9
xX9
xW9
xV9
xU9
xT9
xS9
xR9
xQ9
xP9
xO9
xN9
xM9
xL9
xK9
xJ9
bx I9
xH9
xG9
xF9
xE9
xD9
xC9
xB9
xA9
x@9
x?9
x>9
x=9
x<9
x;9
x:9
x99
x89
x79
x69
x59
x49
x39
x29
x19
x09
bx /9
x.9
x-9
x,9
x+9
x*9
x)9
x(9
x'9
x&9
x%9
x$9
x#9
x"9
x!9
x~8
x}8
x|8
x{8
xz8
xy8
xx8
xw8
xv8
xu8
xt8
bx s8
xr8
xq8
xp8
xo8
xn8
xm8
xl8
xk8
xj8
xi8
xh8
xg8
xf8
xe8
xd8
xc8
xb8
xa8
x`8
x_8
x^8
x]8
x\8
x[8
xZ8
bx Y8
xX8
xW8
xV8
xU8
xT8
xS8
xR8
xQ8
xP8
xO8
xN8
xM8
xL8
xK8
xJ8
xI8
xH8
xG8
xF8
xE8
xD8
xC8
xB8
xA8
x@8
bx ?8
x>8
x=8
x<8
x;8
x:8
x98
x88
x78
x68
x58
x48
x38
x28
x18
x08
x/8
x.8
x-8
x,8
x+8
x*8
x)8
x(8
x'8
x&8
bx %8
x$8
x#8
x"8
x!8
x~7
x}7
x|7
x{7
xz7
xy7
xx7
xw7
xv7
xu7
xt7
xs7
xr7
xq7
xp7
xo7
xn7
xm7
xl7
xk7
xj7
bx i7
xh7
xg7
xf7
xe7
xd7
xc7
xb7
xa7
x`7
x_7
x^7
x]7
x\7
x[7
xZ7
xY7
xX7
xW7
xV7
xU7
xT7
xS7
xR7
xQ7
xP7
bx O7
xN7
xM7
xL7
xK7
xJ7
xI7
xH7
xG7
xF7
xE7
xD7
xC7
xB7
xA7
x@7
x?7
x>7
x=7
x<7
x;7
x:7
x97
x87
x77
x67
bx 57
x47
x37
x27
x17
x07
x/7
x.7
x-7
x,7
x+7
x*7
x)7
x(7
x'7
x&7
x%7
x$7
x#7
x"7
x!7
x~6
x}6
x|6
x{6
xz6
bx y6
xx6
xw6
xv6
xu6
xt6
xs6
xr6
xq6
xp6
xo6
xn6
xm6
xl6
xk6
xj6
xi6
xh6
xg6
xf6
xe6
xd6
xc6
xb6
xa6
x`6
bx _6
x^6
x]6
x\6
x[6
xZ6
xY6
xX6
xW6
xV6
xU6
xT6
xS6
xR6
xQ6
xP6
xO6
xN6
xM6
xL6
xK6
xJ6
xI6
xH6
xG6
xF6
bx E6
xD6
xC6
xB6
xA6
x@6
x?6
x>6
x=6
x<6
x;6
x:6
x96
x86
x76
x66
x56
x46
x36
x26
x16
x06
x/6
x.6
x-6
x,6
bx +6
x*6
x)6
x(6
x'6
x&6
x%6
x$6
x#6
x"6
x!6
x~5
x}5
x|5
x{5
xz5
xy5
xx5
xw5
xv5
xu5
xt5
xs5
xr5
xq5
xp5
bx o5
xn5
xm5
xl5
xk5
xj5
xi5
xh5
xg5
xf5
xe5
xd5
xc5
xb5
xa5
x`5
x_5
x^5
x]5
x\5
x[5
xZ5
xY5
xX5
xW5
xV5
bx U5
xT5
xS5
xR5
xQ5
xP5
xO5
xN5
xM5
xL5
xK5
xJ5
xI5
xH5
xG5
xF5
xE5
xD5
xC5
xB5
xA5
x@5
x?5
x>5
x=5
x<5
bx ;5
x:5
x95
x85
x75
x65
x55
x45
x35
x25
x15
x05
x/5
x.5
x-5
x,5
x+5
x*5
x)5
x(5
x'5
x&5
x%5
x$5
x#5
x"5
bx !5
x~4
x}4
x|4
x{4
xz4
xy4
xx4
xw4
xv4
xu4
xt4
xs4
xr4
xq4
xp4
xo4
xn4
xm4
xl4
xk4
xj4
xi4
xh4
xg4
xf4
bx e4
xd4
xc4
xb4
xa4
x`4
x_4
x^4
x]4
x\4
x[4
xZ4
xY4
xX4
xW4
xV4
xU4
xT4
xS4
xR4
xQ4
xP4
xO4
xN4
xM4
xL4
bx K4
xJ4
xI4
xH4
xG4
xF4
xE4
xD4
xC4
xB4
xA4
x@4
bx ?4
bx >4
x=4
x<4
x;4
x:4
x94
x84
x74
x64
x54
x44
x34
bx 24
x14
x04
x/4
b0xx .4
x-4
x,4
bx +4
bx *4
b0xxxxxxxxxxxxxxxxxxxxxxxxxx )4
bx (4
bx '4
0&4
x%4
x$4
x#4
x"4
x!4
x~3
x}3
x|3
0{3
0z3
0y3
0x3
0w3
0v3
0u3
xt3
b0 s3
1r3
1q3
1p3
xo3
xn3
xm3
xl3
b0 k3
xj3
xi3
0h3
xg3
xf3
xe3
0d3
xc3
xb3
1a3
0`3
0_3
0^3
0]3
0\3
0[3
0Z3
xY3
b0 X3
1W3
1V3
1U3
xT3
0S3
0R3
xQ3
xP3
xO3
0N3
xM3
xL3
xK3
0J3
xI3
xH3
1G3
0F3
0E3
0D3
0C3
0B3
0A3
0@3
x?3
b0 >3
1=3
1<3
1;3
x:3
093
083
x73
x63
x53
043
x33
x23
x13
003
x/3
x.3
1-3
0,3
0+3
0*3
0)3
0(3
0'3
0&3
x%3
b0 $3
1#3
1"3
1!3
x~2
0}2
0|2
x{2
xz2
xy2
0x2
xw2
xv2
xu2
0t2
xs2
xr2
1q2
0p2
0o2
0n2
0m2
0l2
0k2
0j2
xi2
b0 h2
1g2
1f2
1e2
xd2
0c2
0b2
xa2
x`2
x_2
0^2
x]2
x\2
x[2
0Z2
xY2
xX2
1W2
0V2
0U2
0T2
0S2
0R2
0Q2
0P2
xO2
b0 N2
1M2
1L2
1K2
xJ2
0I2
0H2
xG2
xF2
xE2
0D2
xC2
xB2
xA2
0@2
x?2
x>2
1=2
0<2
0;2
0:2
092
082
072
062
x52
b0 42
132
122
112
x02
0/2
0.2
x-2
x,2
x+2
0*2
x)2
x(2
x'2
0&2
x%2
x$2
1#2
0"2
0!2
0~1
0}1
0|1
0{1
0z1
xy1
b0 x1
1w1
1v1
1u1
xt1
0s1
0r1
xq1
xp1
xo1
0n1
xm1
xl1
xk1
0j1
xi1
xh1
1g1
0f1
0e1
0d1
0c1
0b1
0a1
0`1
x_1
b0 ^1
1]1
1\1
1[1
xZ1
0Y1
0X1
xW1
xV1
xU1
0T1
xS1
xR1
xQ1
0P1
xO1
xN1
1M1
0L1
0K1
0J1
0I1
0H1
0G1
0F1
xE1
b0 D1
1C1
1B1
1A1
x@1
0?1
0>1
x=1
x<1
x;1
0:1
x91
x81
x71
061
x51
x41
131
021
011
001
0/1
0.1
0-1
0,1
x+1
b0 *1
1)1
1(1
1'1
x&1
0%1
0$1
x#1
x"1
x!1
0~0
x}0
x|0
x{0
0z0
xy0
xx0
1w0
0v0
0u0
0t0
0s0
0r0
0q0
0p0
xo0
b0 n0
1m0
1l0
1k0
xj0
0i0
0h0
xg0
xf0
xe0
0d0
xc0
xb0
xa0
0`0
x_0
x^0
1]0
0\0
0[0
0Z0
0Y0
0X0
0W0
0V0
xU0
b0 T0
1S0
1R0
1Q0
xP0
0O0
0N0
xM0
xL0
xK0
0J0
xI0
xH0
xG0
0F0
xE0
xD0
1C0
0B0
0A0
0@0
0?0
0>0
0=0
0<0
x;0
b0 :0
190
180
170
x60
050
040
x30
x20
x10
000
x/0
x.0
x-0
0,0
x+0
x*0
1)0
0(0
0'0
0&0
0%0
0$0
0#0
0"0
x!0
b0 ~/
1}/
1|/
1{/
xz/
0y/
0x/
xw/
xv/
xu/
0t/
xs/
xr/
xq/
0p/
xo/
xn/
1m/
0l/
0k/
0j/
0i/
0h/
0g/
0f/
xe/
b0 d/
1c/
1b/
1a/
x`/
0_/
0^/
x]/
x\/
x[/
xZ/
xY/
xX/
xW/
xV/
xU/
xT/
xS/
0R/
0Q/
0P/
0O/
0N/
0M/
0L/
xK/
b0 J/
1I/
1H/
1G/
xF/
xE/
xD/
xC/
xB/
xA/
x@/
x?/
x>/
x=/
x</
x;/
x:/
x9/
08/
07/
06/
05/
04/
03/
02/
x1/
b0 0/
1//
1./
1-/
x,/
x+/
x*/
x)/
x(/
x'/
x&/
x%/
x$/
x#/
x"/
x!/
x~.
x}.
0|.
0{.
0z.
0y.
0x.
0w.
0v.
xu.
b0 t.
1s.
1r.
1q.
xp.
xo.
xn.
xm.
xl.
xk.
xj.
xi.
xh.
xg.
xf.
xe.
xd.
xc.
0b.
0a.
0`.
0_.
0^.
0].
0\.
x[.
b0 Z.
1Y.
1X.
1W.
xV.
xU.
xT.
xS.
xR.
xQ.
xP.
xO.
xN.
xM.
xL.
xK.
xJ.
xI.
0H.
0G.
0F.
0E.
0D.
0C.
0B.
xA.
b0 @.
1?.
1>.
1=.
x<.
x;.
x:.
x9.
x8.
x7.
x6.
x5.
x4.
x3.
x2.
x1.
x0.
x/.
0..
0-.
0,.
0+.
0*.
0).
0(.
x'.
b0 &.
1%.
1$.
1#.
x".
x!.
x~-
x}-
x|-
x{-
xz-
xy-
xx-
xw-
xv-
xu-
xt-
xs-
0r-
0q-
0p-
0o-
0n-
0m-
0l-
xk-
b0 j-
1i-
1h-
1g-
xf-
xe-
xd-
xc-
xb-
xa-
x`-
x_-
x^-
x]-
x\-
x[-
xZ-
xY-
0X-
0W-
0V-
0U-
0T-
0S-
0R-
xQ-
b0 P-
1O-
1N-
1M-
xL-
xK-
xJ-
xI-
xH-
xG-
xF-
xE-
xD-
xC-
xB-
xA-
x@-
x?-
0>-
0=-
0<-
0;-
0:-
09-
08-
x7-
b0 6-
15-
14-
13-
x2-
x1-
x0-
x/-
x.-
x--
x,-
x+-
x*-
x)-
x(-
x'-
x&-
x%-
0$-
0#-
0"-
0!-
0~,
0},
0|,
x{,
b0 z,
1y,
1x,
1w,
xv,
xu,
xt,
xs,
xr,
xq,
xp,
xo,
xn,
xm,
xl,
xk,
xj,
xi,
0h,
0g,
0f,
0e,
0d,
0c,
0b,
xa,
b0 `,
1_,
1^,
1],
x\,
x[,
xZ,
xY,
xX,
xW,
xV,
xU,
xT,
xS,
xR,
xQ,
xP,
xO,
0N,
0M,
0L,
0K,
0J,
0I,
0H,
xG,
b0 F,
1E,
1D,
1C,
xB,
xA,
x@,
x?,
x>,
x=,
x<,
x;,
x:,
x9,
x8,
x7,
x6,
x5,
04,
03,
02,
01,
00,
0/,
0.,
x-,
b0 ,,
1+,
1*,
1),
x(,
x',
x&,
x%,
x$,
x#,
x",
x!,
x~+
x}+
x|+
x{+
xz+
xy+
0x+
0w+
0v+
0u+
0t+
0s+
0r+
xq+
b0 p+
1o+
1n+
1m+
xl+
xk+
xj+
xi+
xh+
xg+
xf+
xe+
xd+
xc+
xb+
xa+
x`+
x_+
0^+
0]+
0\+
0[+
0Z+
0Y+
0X+
xW+
b0 V+
1U+
1T+
1S+
xR+
xQ+
xP+
xO+
xN+
xM+
xL+
xK+
xJ+
xI+
xH+
xG+
xF+
xE+
0D+
0C+
0B+
0A+
0@+
0?+
0>+
x=+
b0 <+
1;+
1:+
19+
x8+
x7+
x6+
x5+
x4+
03+
02+
01+
bx 0+
1/+
0.+
0-+
x,+
x++
x*+
0)+
x(+
x'+
x&+
x%+
x$+
b0xxxxxxxxxxxxxxxxx #+
bx "+
1!+
x~*
1}*
b0 |*
x{*
xz*
b0xxxxxxxxxxxxxxxxx y*
b0xxxxxxxxxxxxxxxxx x*
b100 w*
xv*
bx u*
bx t*
bx s*
bx r*
bx q*
bx p*
bx o*
bx n*
bx m*
bx l*
bx k*
xj*
b0xx i*
xh*
xg*
bx f*
bx e*
bx d*
xc*
bx b*
xa*
bx `*
x_*
bx ^*
bx ]*
x\*
x[*
xZ*
xY*
xX*
xW*
0V*
xU*
0T*
xS*
xR*
xQ*
xP*
xO*
1N*
0M*
0L*
0K*
0J*
0I*
0H*
0G*
xF*
b0 E*
1D*
1C*
1B*
xA*
0@*
x?*
0>*
b0 =*
0<*
0;*
0:*
09*
08*
07*
06*
05*
14*
13*
02*
01*
00*
0/*
0.*
0-*
0,*
0+*
b0 **
1)*
1(*
1'*
0&*
0%*
0$*
0#*
0"*
0!*
0~)
0})
0|)
0{)
0z)
0y)
1x)
1w)
0v)
0u)
0t)
0s)
0r)
0q)
0p)
0o)
b0 n)
1m)
1l)
1k)
0j)
0i)
0h)
0g)
0f)
0e)
0d)
0c)
0b)
0a)
0`)
0_)
1^)
1])
0\)
0[)
0Z)
0Y)
0X)
0W)
0V)
0U)
b0 T)
1S)
1R)
1Q)
0P)
0O)
0N)
0M)
0L)
0K)
0J)
0I)
0H)
0G)
0F)
0E)
1D)
1C)
0B)
0A)
0@)
0?)
0>)
0=)
0<)
0;)
b0 :)
19)
18)
17)
06)
05)
04)
03)
02)
01)
00)
0/)
0.)
0-)
0,)
0+)
1*)
1))
0()
0')
0&)
0%)
0$)
0#)
0")
0!)
b0 ~(
1}(
1|(
1{(
0z(
0y(
0x(
0w(
0v(
0u(
0t(
0s(
0r(
0q(
0p(
0o(
1n(
1m(
0l(
0k(
0j(
0i(
0h(
0g(
0f(
0e(
b0 d(
1c(
1b(
1a(
0`(
0_(
0^(
0](
0\(
0[(
0Z(
0Y(
0X(
0W(
0V(
0U(
1T(
1S(
0R(
0Q(
0P(
0O(
0N(
0M(
0L(
0K(
b0 J(
1I(
1H(
1G(
0F(
0E(
0D(
0C(
0B(
0A(
0@(
0?(
0>(
0=(
0<(
0;(
1:(
19(
08(
07(
06(
05(
04(
03(
02(
01(
b0 0(
1/(
1.(
1-(
0,(
0+(
0*(
0)(
0((
0'(
0&(
0%(
0$(
0#(
0"(
0!(
1~'
1}'
0|'
0{'
0z'
0y'
0x'
0w'
0v'
0u'
b0 t'
1s'
1r'
1q'
0p'
0o'
0n'
0m'
0l'
0k'
0j'
0i'
0h'
0g'
0f'
0e'
1d'
1c'
0b'
0a'
0`'
0_'
0^'
0]'
0\'
0['
b0 Z'
1Y'
1X'
1W'
0V'
0U'
0T'
0S'
0R'
0Q'
0P'
0O'
0N'
0M'
0L'
0K'
1J'
1I'
0H'
0G'
0F'
0E'
0D'
0C'
0B'
0A'
b0 @'
1?'
1>'
1='
0<'
0;'
0:'
09'
08'
07'
06'
05'
04'
03'
02'
01'
10'
1/'
0.'
0-'
0,'
0+'
0*'
0)'
0('
0''
b0 &'
1%'
1$'
1#'
0"'
0!'
0~&
0}&
0|&
0{&
0z&
0y&
0x&
0w&
0v&
0u&
1t&
1s&
0r&
0q&
0p&
0o&
0n&
0m&
0l&
0k&
b0 j&
1i&
1h&
1g&
0f&
0e&
0d&
0c&
0b&
0a&
0`&
0_&
0^&
0]&
0\&
0[&
1Z&
1Y&
0X&
0W&
0V&
0U&
0T&
0S&
0R&
0Q&
b0 P&
1O&
1N&
1M&
0L&
0K&
0J&
0I&
0H&
0G&
0F&
0E&
0D&
0C&
0B&
0A&
1@&
1?&
0>&
0=&
0<&
0;&
0:&
09&
08&
07&
b0 6&
15&
14&
13&
02&
01&
00&
0/&
0.&
0-&
0,&
x+&
0*&
0)&
0(&
0'&
1&&
1%&
0$&
0#&
0"&
0!&
0~%
0}%
0|%
x{%
b0 z%
1y%
1x%
1w%
xv%
0u%
0t%
0s%
xr%
xq%
0p%
xo%
xn%
xm%
xl%
xk%
xj%
1i%
0h%
0g%
0f%
0e%
0d%
0c%
0b%
xa%
b0 `%
1_%
1^%
1]%
x\%
0[%
xZ%
0Y%
xX%
xW%
0V%
xU%
xT%
xS%
xR%
xQ%
xP%
1O%
0N%
0M%
0L%
0K%
0J%
0I%
0H%
xG%
b0 F%
1E%
1D%
1C%
xB%
0A%
x@%
0?%
x>%
x=%
0<%
x;%
x:%
x9%
x8%
x7%
x6%
15%
04%
03%
02%
01%
00%
0/%
0.%
x-%
b0 ,%
1+%
1*%
1)%
x(%
0'%
x&%
0%%
x$%
x#%
0"%
x!%
x~$
x}$
x|$
x{$
xz$
1y$
0x$
0w$
0v$
0u$
0t$
0s$
0r$
xq$
b0 p$
1o$
1n$
1m$
xl$
0k$
xj$
0i$
xh$
xg$
0f$
xe$
xd$
xc$
xb$
xa$
x`$
1_$
0^$
0]$
0\$
0[$
0Z$
0Y$
0X$
xW$
b0 V$
1U$
1T$
1S$
xR$
0Q$
xP$
0O$
xN$
xM$
0L$
xK$
xJ$
xI$
xH$
xG$
xF$
1E$
0D$
0C$
0B$
0A$
0@$
0?$
0>$
x=$
b0 <$
1;$
1:$
19$
x8$
07$
x6$
05$
x4$
x3$
02$
x1$
x0$
x/$
x.$
x-$
x,$
1+$
0*$
0)$
0($
0'$
0&$
0%$
0$$
x#$
b0 "$
1!$
1~#
1}#
x|#
0{#
xz#
0y#
xx#
xw#
0v#
xu#
xt#
xs#
xr#
xq#
xp#
1o#
0n#
0m#
0l#
0k#
0j#
0i#
0h#
xg#
b0 f#
1e#
1d#
1c#
xb#
0a#
x`#
0_#
x^#
x]#
0\#
x[#
xZ#
xY#
xX#
xW#
xV#
1U#
0T#
0S#
0R#
0Q#
0P#
0O#
0N#
xM#
b0 L#
1K#
1J#
1I#
xH#
0G#
xF#
0E#
xD#
xC#
0B#
xA#
x@#
x?#
x>#
x=#
x<#
1;#
0:#
09#
08#
07#
06#
05#
04#
x3#
b0 2#
11#
10#
1/#
x.#
0-#
x,#
0+#
x*#
x)#
0(#
x'#
x&#
x%#
x$#
x##
x"#
1!#
0~"
0}"
0|"
0{"
0z"
0y"
0x"
xw"
b0 v"
1u"
1t"
1s"
xr"
0q"
xp"
0o"
xn"
xm"
0l"
xk"
xj"
xi"
xh"
xg"
xf"
1e"
0d"
0c"
0b"
0a"
0`"
0_"
0^"
x]"
b0 \"
1["
1Z"
1Y"
xX"
0W"
xV"
0U"
xT"
xS"
0R"
xQ"
xP"
xO"
xN"
xM"
xL"
1K"
0J"
0I"
0H"
0G"
0F"
0E"
0D"
xC"
b0 B"
1A"
1@"
1?"
x>"
0="
x<"
0;"
0:"
x9"
x8"
x7"
x6"
x5"
x4"
13"
02"
x1"
00"
0/"
0."
0-"
0,"
0+"
0*"
x)"
b0 ("
1'"
1&"
1%"
x$"
x#"
x""
1!"
0~
x}
0|
x{
0z
xy
xx
xw
xv
1u
0t
0s
0r
0q
0p
0o
0n
xm
b0 l
1k
1j
1i
0h
xg
0f
xe
0d
0c
0b
0a
b0xxxxxxxxxxxxxxxxx `
1_
0^
0]
x\
x[
xZ
0Y
0X
0W
0V
0U
0T
b0xxxxxxxxxxxxxxxx S
b100 R
1Q
1P
1O
b0 N
0M
0L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
b0xxxxxxxxxxxxxxxxx 7
bx 6
bx 5
bx 4
x3
bx 2
bx 1
bx 0
bx /
x.
bx -
b0xxxxxxxxxxxxxxxxx ,
bx +
bx *
x)
b0xx (
bx '
x&
z%
0$
0#
x"
x!
$end
#10
1$
#20
0$
#30
1$
#40
0$
#50
1$
#60
0$
#70
1$
#80
0$
#90
1$
#100
0$
#110
1$
#120
0$
#130
1$
#140
0$
#150
1$
#160
0$
#170
1$
#180
0$
#190
1$
#200
0$
#210
1$
#220
0$
#230
1$
#240
0$
#250
1$
#260
0$
#270
1$
#280
0$
#290
1$
#300
0$
#310
1$
#320
0$
#330
1$
#340
0$
#350
1$
#360
0$
#370
1$
#380
0$
#390
1$
#400
0$
#410
1$
#420
0$
#430
1$
#440
0$
#450
1$
#460
0$
#470
1$
#480
0$
#490
1$
#500
0$
#510
1$
#520
0$
#530
1$
#540
0$
#550
1$
#560
0$
#570
1$
#580
0$
#590
1$
#600
0$
#610
1$
#620
0$
#630
1$
#640
0$
#650
1$
#660
0$
#670
1$
#680
0$
#690
1$
#700
0$
#710
1$
#720
0$
#730
1$
#740
0$
#750
1$
#760
0$
#770
1$
#780
0$
#790
1$
#800
0$
#810
1$
#820
0$
#830
1$
#840
0$
#850
1$
#860
0$
#870
1$
#880
0$
#890
1$
#900
0$
#910
1$
#920
0$
#930
1$
#940
0$
#950
1$
#960
0$
#970
1$
#980
0$
#990
1$
#1000
1"
0$
1#
